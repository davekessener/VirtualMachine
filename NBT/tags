!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BYTE	NBT/common.h	/^	typedef std::uint8_t   BYTE;$/;"	t	namespace:NBT
BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<BYTE>$/;"	s	namespace:NBT
BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<DWORD>$/;"	s	namespace:NBT
BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<QWORD>$/;"	s	namespace:NBT
BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<WORD>$/;"	s	namespace:NBT
BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<double>$/;"	s	namespace:NBT
BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<float>$/;"	s	namespace:NBT
CC	NBT/makefile	/^CC=g++$/;"	m
CC	makefile	/^CC=g++$/;"	m
CC	test/makefile	/^CC=g++$/;"	m
CFLAGS	NBT/makefile	/^CFLAGS=-fPIC -std=c++0x$/;"	m
CFLAGS	makefile	/^CFLAGS=-std=c++0x -ggdb -DDEBUG$/;"	m
CFLAGS	test/makefile	/^CFLAGS=-std=c++0x -ggdb -DDEBUG$/;"	m
DEBUG	GZ/makefile	/^DEBUG=-ggdb -DDEBUG$/;"	m
DEBUG	NBT/makefile	/^DEBUG=-ggdb -DDEBUG$/;"	m
DEPS	makefile	/^DEPS=GZ\/libgz.so NBT\/libnbt.so$/;"	m
DWORD	NBT/common.h	/^	typedef std::uint32_t DWORD;$/;"	t	namespace:NBT
Default	NBT/NBT.cc	/^	NBTBase *NBTHelper::Default(BYTE id)$/;"	f	class:NBT::NBTHelper	signature:(BYTE id)
Default	NBT/NBT.h	/^			NBTBase *Default(BYTE);$/;"	p	class:NBT::NBTHelper	access:public	signature:(BYTE)
EDITOR_H	Editor.h	2;"	d
Editor	Editor.h	/^class Editor$/;"	c
Editor::run	Editor.cc	/^int Editor::run(int argc, char *argv[])$/;"	f	class:Editor	signature:(int argc, char *argv[])
Editor::run	Editor.h	/^		static int run(int, char **);$/;"	p	class:Editor	access:public	signature:(int, char **)
GZSTREAM_H	GZ/gzstream.h	30;"	d
GZSTREAM_NAMESPACE	GZ/gzstream.h	32;"	d
HEADERS	makefile	/^HEADERS=$(wildcard *.h)$/;"	m
ID	NBT/NBT.h	/^			static const BYTE ID;$/;"	m	class:NBT::_NBTBase	access:public
ID	NBT/NBT.h	/^	const BYTE _NBTBase<id>::ID = id;$/;"	m	class:NBT::_NBTBase
ID	NBT/common.h	/^		static const BYTE ID = 1;$/;"	m	struct:NBT::BasicTypeIDs	access:public
ID	NBT/common.h	/^		static const BYTE ID = 2;$/;"	m	struct:NBT::BasicTypeIDs	access:public
ID	NBT/common.h	/^		static const BYTE ID = 3;$/;"	m	struct:NBT::BasicTypeIDs	access:public
ID	NBT/common.h	/^		static const BYTE ID = 4;$/;"	m	struct:NBT::BasicTypeIDs	access:public
ID	NBT/common.h	/^		static const BYTE ID = 5;$/;"	m	struct:NBT::BasicTypeIDs	access:public
ID	NBT/common.h	/^		static const BYTE ID = 6;$/;"	m	struct:NBT::BasicTypeIDs	access:public
INT	NBT/common.h	/^	typedef DWORD   INT;$/;"	t	namespace:NBT
Instance	NBT/NBT.cc	/^	NBTHelper& NBTHelper::Instance(void)$/;"	f	class:NBT::NBTHelper	signature:(void)
Instance	NBT/NBT.h	/^			static NBTHelper& Instance( );$/;"	p	class:NBT::NBTHelper	access:public	signature:( )
KEYBOARD_H	Keyboard.h	2;"	d
KEY_CTRL_C	Keyboard.h	8;"	d
KEY_CTRL_C	test.cc	16;"	d	file:
KEY_CTRL_D	Keyboard.h	9;"	d
KEY_CTRL_D	test.cc	17;"	d	file:
KEY_ESC	Keyboard.h	10;"	d
KEY_ESC	test.cc	18;"	d	file:
Keyboard	Keyboard.cc	/^Keyboard::Keyboard(void) : _buf()$/;"	f	class:Keyboard	signature:(void)
Keyboard	Keyboard.h	/^		Keyboard( );$/;"	p	class:Keyboard	access:private	signature:( )
Keyboard	Keyboard.h	/^		Keyboard(const Keyboard&);$/;"	p	class:Keyboard	access:private	signature:(const Keyboard&)
Keyboard	Keyboard.h	/^class Keyboard$/;"	c
Keyboard::Keyboard	Keyboard.cc	/^Keyboard::Keyboard(void) : _buf()$/;"	f	class:Keyboard	signature:(void)
Keyboard::Keyboard	Keyboard.h	/^		Keyboard( );$/;"	p	class:Keyboard	access:private	signature:( )
Keyboard::Keyboard	Keyboard.h	/^		Keyboard(const Keyboard&);$/;"	p	class:Keyboard	access:private	signature:(const Keyboard&)
Keyboard::_buf	Keyboard.h	/^		std::deque<int> _buf;$/;"	m	class:Keyboard	access:private
Keyboard::clear	Keyboard.cc	/^void Keyboard::clear(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::clear	Keyboard.h	/^		void clear( );$/;"	p	class:Keyboard	access:public	signature:( )
Keyboard::empty	Keyboard.cc	/^bool Keyboard::empty(void) $/;"	f	class:Keyboard	signature:(void)
Keyboard::empty	Keyboard.h	/^		bool empty( );$/;"	p	class:Keyboard	access:public	signature:( )
Keyboard::flush	Keyboard.cc	/^void Keyboard::flush(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::flush	Keyboard.h	/^		void flush( );$/;"	p	class:Keyboard	access:private	signature:( )
Keyboard::instance	Keyboard.cc	/^Keyboard& Keyboard::instance(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::instance	Keyboard.h	/^		static Keyboard& instance( );$/;"	p	class:Keyboard	access:public	signature:( )
Keyboard::operator =	Keyboard.h	/^		Keyboard& operator=(const Keyboard&);$/;"	p	class:Keyboard	access:private	signature:(const Keyboard&)
Keyboard::operator []	Keyboard.cc	/^int Keyboard::operator[](int idx)$/;"	f	class:Keyboard	signature:(int idx)
Keyboard::operator []	Keyboard.h	/^		int operator[](int);$/;"	p	class:Keyboard	access:public	signature:(int)
Keyboard::peek	Keyboard.cc	/^int Keyboard::peek(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::peek	Keyboard.h	/^		int peek( );$/;"	p	class:Keyboard	access:public	signature:( )
Keyboard::poll	Keyboard.cc	/^int Keyboard::poll(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::poll	Keyboard.h	/^		int poll( );$/;"	p	class:Keyboard	access:public	signature:( )
Keyboard::pop	Keyboard.cc	/^int Keyboard::pop(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::pop	Keyboard.h	/^		int pop( );$/;"	p	class:Keyboard	access:public	signature:( )
Keyboard::readSeq	Keyboard.cc	/^int Keyboard::readSeq(int *b, int n)$/;"	f	class:Keyboard	signature:(int *b, int n)
Keyboard::readSeq	Keyboard.h	/^		int readSeq(int *, int = -1);$/;"	p	class:Keyboard	access:public	signature:(int *, int = -1)
Keyboard::~Keyboard	Keyboard.cc	/^Keyboard::~Keyboard(void)$/;"	f	class:Keyboard	signature:(void)
Keyboard::~Keyboard	Keyboard.h	/^		~Keyboard( );$/;"	p	class:Keyboard	access:private	signature:( )
LD_LIBRARY_PATH	makefile	/^	export LD_LIBRARY_PATH=".\/NBT;.\/GZ" && .\/$(TARGET)$/;"	m
LIBS	NBT/makefile	/^LIBS=-L..\/GZ -lgz$/;"	m
LIBS	makefile	/^LIBS=-L.\/GZ -L.\/NBT -lgz -lnbt$/;"	m
LIBS	test/makefile	/^LIBS=$/;"	m
LONG	NBT/common.h	/^	typedef QWORD  LONG;$/;"	t	namespace:NBT
Make	NBT/NBT.h	/^	std::shared_ptr<T> Make(A ... a)$/;"	f	namespace:NBT	signature:(A .... a)
NBT	NBT/NBT.cc	/^namespace NBT$/;"	n	file:
NBT	NBT/NBT.h	/^namespace NBT$/;"	n
NBT	NBT/Reader.cc	/^namespace NBT$/;"	n	file:
NBT	NBT/Reader.h	/^namespace NBT$/;"	n
NBT	NBT/Writer.cc	/^namespace NBT$/;"	n	file:
NBT	NBT/Writer.h	/^namespace NBT$/;"	n
NBT	NBT/common.h	/^namespace NBT$/;"	n
NBT::BYTE	NBT/common.h	/^	typedef std::uint8_t   BYTE;$/;"	t	namespace:NBT
NBT::BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<BYTE>$/;"	s	namespace:NBT
NBT::BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<DWORD>$/;"	s	namespace:NBT
NBT::BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<QWORD>$/;"	s	namespace:NBT
NBT::BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<WORD>$/;"	s	namespace:NBT
NBT::BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<double>$/;"	s	namespace:NBT
NBT::BasicTypeIDs	NBT/common.h	/^	template<> struct BasicTypeIDs<float>$/;"	s	namespace:NBT
NBT::BasicTypeIDs::ID	NBT/common.h	/^		static const BYTE ID = 1;$/;"	m	struct:NBT::BasicTypeIDs	access:public
NBT::BasicTypeIDs::ID	NBT/common.h	/^		static const BYTE ID = 2;$/;"	m	struct:NBT::BasicTypeIDs	access:public
NBT::BasicTypeIDs::ID	NBT/common.h	/^		static const BYTE ID = 3;$/;"	m	struct:NBT::BasicTypeIDs	access:public
NBT::BasicTypeIDs::ID	NBT/common.h	/^		static const BYTE ID = 4;$/;"	m	struct:NBT::BasicTypeIDs	access:public
NBT::BasicTypeIDs::ID	NBT/common.h	/^		static const BYTE ID = 5;$/;"	m	struct:NBT::BasicTypeIDs	access:public
NBT::BasicTypeIDs::ID	NBT/common.h	/^		static const BYTE ID = 6;$/;"	m	struct:NBT::BasicTypeIDs	access:public
NBT::DWORD	NBT/common.h	/^	typedef std::uint32_t DWORD;$/;"	t	namespace:NBT
NBT::INT	NBT/common.h	/^	typedef DWORD   INT;$/;"	t	namespace:NBT
NBT::LONG	NBT/common.h	/^	typedef QWORD  LONG;$/;"	t	namespace:NBT
NBT::Make	NBT/NBT.h	/^	std::shared_ptr<T> Make(A ... a)$/;"	f	namespace:NBT	signature:(A .... a)
NBT::NBTArray	NBT/NBT.h	/^	class NBTArray : public _NBTBase<ID>, public std::vector<T2>$/;"	c	namespace:NBT	inherits:_NBTBase,std::vector
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(C<NBT_ptr_t>& c) { init("", c.begin(), c.end()); }$/;"	f	class:NBT::NBTArray	access:public	signature:(C<NBT_ptr_t>& c)
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(T t1, T t2) { init("", t1, t2); }$/;"	f	class:NBT::NBTArray	access:public	signature:(T t1, T t2)
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s = "") { NBTBase::setName(s); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s = Ó)
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s, C<NBT_ptr_t>& c) { init(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s, C<NBT_ptr_t>& c)
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s, T t1, T t2) { init(s, t1, t2); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s, T t1, T t2)
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s, std::initializer_list<T2> v) { init(s, v); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s, std::initializer_list<T2> v)
NBT::NBTArray::NBTArray	NBT/NBT.h	/^			NBTArray(std::initializer_list<T2> v) { init("", v); }$/;"	f	class:NBT::NBTArray	access:public	signature:(std::initializer_list<T2> v)
NBT::NBTArray::NBTBase::setName	NBT/NBT.h	/^			NBTArray(const std::string& s = "") { NBTBase::setName(s); }$/;"	p	class:NBT::NBTArray::NBTBase	signature:(s)
NBT::NBTArray::_read	NBT/NBT.cc	/^	void NBTArray<ID, T1, T2>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTArray	signature:(const nbtistream& is)
NBT::NBTArray::_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTArray	access:protected	signature:(const nbtistream&)
NBT::NBTArray::_write	NBT/NBT.cc	/^	void NBTArray<ID, T1, T2>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTArray	signature:(const nbtostream& os)
NBT::NBTArray::_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTArray	access:protected	signature:(const nbtostream&)
NBT::NBTArray::get	NBT/NBT.h	/^			const std::vector<T2> get() { return std::vector<T2>(vec_t::begin(), vec_t::end()); }$/;"	f	class:NBT::NBTArray	access:public	signature:()
NBT::NBTArray::init	NBT/NBT.cc	/^	void NBTArray<ID, T1, T2>::init(const std::string& s, std::initializer_list<T2> v)$/;"	f	class:NBT::NBTArray	signature:(const std::string& s, std::initializer_list<T2> v)
NBT::NBTArray::init	NBT/NBT.h	/^			void init(const std::string& , T, T);$/;"	p	class:NBT::NBTArray	access:private	signature:(const std::string& , T, T)
NBT::NBTArray::init	NBT/NBT.h	/^			void init(const std::string& , std::initializer_list<T2>);$/;"	p	class:NBT::NBTArray	access:private	signature:(const std::string& , std::initializer_list<T2>)
NBT::NBTArray::init	NBT/NBT.h	/^	void NBTArray<ID, T1, T2>::init(const std::string& s, I i1, I i2)$/;"	f	class:NBT::NBTArray	signature:(const std::string& s, I i1, I i2)
NBT::NBTArray::ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTArray<ID, T1, T2>> ptr_t;$/;"	t	class:NBT::NBTArray	access:public
NBT::NBTArray::vec_t	NBT/NBT.h	/^		typedef std::vector<T2> vec_t;$/;"	t	class:NBT::NBTArray	access:private
NBT::NBTBase	NBT/NBT.h	/^	class NBTBase$/;"	c	namespace:NBT
NBT::NBTBase::NBTBase	NBT/NBT.h	/^			NBTBase(void) : name(NULL) { }$/;"	f	class:NBT::NBTBase	access:public	signature:(void)
NBT::NBTBase::_read	NBT/NBT.h	/^			virtual void _read(const nbtistream&) = 0;$/;"	p	class:NBT::NBTBase	access:protected	signature:(const nbtistream&)
NBT::NBTBase::_write	NBT/NBT.h	/^			virtual void _write(const nbtostream&) = 0;$/;"	p	class:NBT::NBTBase	access:protected	signature:(const nbtostream&)
NBT::NBTBase::getID	NBT/NBT.h	/^			virtual BYTE getID( ) = 0;$/;"	p	class:NBT::NBTBase	access:public	signature:( )
NBT::NBTBase::getName	NBT/NBT.h	/^			std::string getName(void) { return std::string(reinterpret_cast<const char *>(name)); }$/;"	f	class:NBT::NBTBase	access:public	signature:(void)
NBT::NBTBase::name	NBT/NBT.h	/^			BYTE *name;$/;"	m	class:NBT::NBTBase	access:protected
NBT::NBTBase::read	NBT/NBT.cc	/^	void NBTBase::read(const nbtistream& is)$/;"	f	class:NBT::NBTBase	signature:(const nbtistream& is)
NBT::NBTBase::read	NBT/NBT.cc	/^	void NBTBase::read(gzip::igzstream& is)$/;"	f	class:NBT::NBTBase	signature:(gzip::igzstream& is)
NBT::NBTBase::read	NBT/NBT.cc	/^	void NBTBase::read(std::istream& is)$/;"	f	class:NBT::NBTBase	signature:(std::istream& is)
NBT::NBTBase::read	NBT/NBT.h	/^			void read(const nbtistream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(const nbtistream&)
NBT::NBTBase::read	NBT/NBT.h	/^			void read(gzip::igzstream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(gzip::igzstream&)
NBT::NBTBase::read	NBT/NBT.h	/^			void read(std::istream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(std::istream&)
NBT::NBTBase::setName	NBT/NBT.cc	/^		NBTBase::setName(name);$/;"	p	class:NBT::NBTBase	file:	signature:(name)
NBT::NBTBase::setName	NBT/NBT.cc	/^		NBTBase::setName(s);$/;"	p	class:NBT::NBTBase	file:	signature:(s)
NBT::NBTBase::setName	NBT/NBT.cc	/^	void NBTBase::setName(const std::string& s)$/;"	f	class:NBT::NBTBase	signature:(const std::string& s)
NBT::NBTBase::setName	NBT/NBT.h	/^			void setName(const std::string&);$/;"	p	class:NBT::NBTBase	access:public	signature:(const std::string&)
NBT::NBTBase::setName	NBT/NBT.h	/^		NBTBase::setName(name);$/;"	p	class:NBT::NBTBase	signature:(name)
NBT::NBTBase::setName	NBT/NBT.h	/^		NBTBase::setName(s);$/;"	p	class:NBT::NBTBase	signature:(s)
NBT::NBTBase::write	NBT/NBT.cc	/^	void NBTBase::write(const nbtostream& os)$/;"	f	class:NBT::NBTBase	signature:(const nbtostream& os)
NBT::NBTBase::write	NBT/NBT.cc	/^	void NBTBase::write(gzip::ogzstream& os)$/;"	f	class:NBT::NBTBase	signature:(gzip::ogzstream& os)
NBT::NBTBase::write	NBT/NBT.cc	/^	void NBTBase::write(std::ostream& os)$/;"	f	class:NBT::NBTBase	signature:(std::ostream& os)
NBT::NBTBase::write	NBT/NBT.h	/^			void write(gzip::ogzstream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(gzip::ogzstream&)
NBT::NBTBase::write	NBT/NBT.h	/^			void write(std::ostream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(std::ostream&)
NBT::NBTBase::write	NBT/NBT.h	/^  			void write(const nbtostream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(const nbtostream&)
NBT::NBTBase::~NBTBase	NBT/NBT.h	/^			virtual ~NBTBase(void)$/;"	f	class:NBT::NBTBase	access:public	signature:(void)
NBT::NBTHelper	NBT/NBT.h	/^	class NBTHelper$/;"	c	namespace:NBT
NBT::NBTHelper::Default	NBT/NBT.cc	/^	NBTBase *NBTHelper::Default(BYTE id)$/;"	f	class:NBT::NBTHelper	signature:(BYTE id)
NBT::NBTHelper::Default	NBT/NBT.h	/^			NBTBase *Default(BYTE);$/;"	p	class:NBT::NBTHelper	access:public	signature:(BYTE)
NBT::NBTHelper::Instance	NBT/NBT.cc	/^	NBTHelper& NBTHelper::Instance(void)$/;"	f	class:NBT::NBTHelper	signature:(void)
NBT::NBTHelper::Instance	NBT/NBT.h	/^			static NBTHelper& Instance( );$/;"	p	class:NBT::NBTHelper	access:public	signature:( )
NBT::NBTHelper::NBTHelper	NBT/NBT.cc	/^	NBTHelper::NBTHelper(void)$/;"	f	class:NBT::NBTHelper	signature:(void)
NBT::NBTHelper::NBTHelper	NBT/NBT.h	/^			NBTHelper( );$/;"	p	class:NBT::NBTHelper	access:private	signature:( )
NBT::NBTHelper::NBTHelper	NBT/NBT.h	/^			NBTHelper(const NBTHelper&);$/;"	p	class:NBT::NBTHelper	access:private	signature:(const NBTHelper&)
NBT::NBTHelper::Read	NBT/NBT.h	/^			NBTBase *Read(const nbtistream&);$/;"	p	class:NBT::NBTHelper	access:public	signature:(const nbtistream&)
NBT::NBTHelper::Read	NBT/NBT.h	/^			NBT_ptr_t Read(gzip::igzstream&);$/;"	p	class:NBT::NBTHelper	access:public	signature:(gzip::igzstream&)
NBT::NBTHelper::Read	NBT/NBT.h	/^			NBT_ptr_t Read(std::istream&);$/;"	p	class:NBT::NBTHelper	access:public	signature:(std::istream&)
NBT::NBTHelper::cons	NBT/NBT.h	/^			std::map<BYTE, std::function<NBTBase *(void)>> cons;$/;"	m	class:NBT::NBTHelper	access:private
NBT::NBTHelper::operator =	NBT/NBT.h	/^			NBTHelper& operator=(const NBTHelper&);$/;"	p	class:NBT::NBTHelper	access:private	signature:(const NBTHelper&)
NBT::NBTHelper::~NBTHelper	NBT/NBT.cc	/^	NBTHelper::~NBTHelper(void)$/;"	f	class:NBT::NBTHelper	signature:(void)
NBT::NBTHelper::~NBTHelper	NBT/NBT.h	/^			~NBTHelper( );$/;"	p	class:NBT::NBTHelper	access:private	signature:( )
NBT::NBTList	NBT/NBT.h	/^	class NBTList : public _NBTBase<ID>, protected std::vector<NBT_ptr_t>$/;"	c	namespace:NBT	inherits:_NBTBase,std::vector
NBT::NBTList::NBTBase::setName	NBT/NBT.h	/^			NBTList(const std::string& s = "", BYTE id = 0) : tagIds(id) { NBTBase::setName(s); }$/;"	p	class:NBT::NBTList::NBTBase	signature:(s)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(BYTE id) : tagIds(id) { NBTBase::setName(""); }$/;"	f	class:NBT::NBTList	access:public	signature:(BYTE id)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(C<NBT_ptr_t>& c) : tagIds(0) { init("", c.begin(), c.end()); }$/;"	f	class:NBT::NBTList	access:public	signature:(C<NBT_ptr_t>& c)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(T t1, T t2) : tagIds(0) { init("", t1, t2); }$/;"	f	class:NBT::NBTList	access:public	signature:(T t1, T t2)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(const std::string& s = "", BYTE id = 0) : tagIds(id) { NBTBase::setName(s); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s = Ó, BYTE id = 0)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(const std::string& s, C<NBT_ptr_t>& c) :tagIds(0) { init(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s, C<NBT_ptr_t>& c)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(const std::string& s, T t1, T t2) : tagIds(0) { init(s, t1, t2); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s, T t1, T t2)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(const std::string& s, std::initializer_list<NBT_ptr_t> v) : tagIds(0) { init(s, v); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s, std::initializer_list<NBT_ptr_t> v)
NBT::NBTList::NBTList	NBT/NBT.h	/^			NBTList(std::initializer_list<NBT_ptr_t> v) : tagIds(0) { init("", v); }$/;"	f	class:NBT::NBTList	access:public	signature:(std::initializer_list<NBT_ptr_t> v)
NBT::NBTList::_read	NBT/NBT.cc	/^	void NBTList<ID>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTList	signature:(const nbtistream& is)
NBT::NBTList::_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTList	access:protected	signature:(const nbtistream&)
NBT::NBTList::_write	NBT/NBT.cc	/^	void NBTList<ID>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTList	signature:(const nbtostream& os)
NBT::NBTList::_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTList	access:protected	signature:(const nbtostream&)
NBT::NBTList::begin	NBT/NBT.h	/^			iterator<T> begin(void) { return iterator<T>(vec_t::begin()); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
NBT::NBTList::begin	NBT/NBT.h	/^			vec_t::iterator begin(void) { return vec_t::begin(); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
NBT::NBTList::end	NBT/NBT.h	/^			iterator<T> end(void) { return iterator<T>(vec_t::end()); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
NBT::NBTList::end	NBT/NBT.h	/^			vec_t::iterator end(void) { return vec_t::end(); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
NBT::NBTList::init	NBT/NBT.cc	/^	void NBTList<ID>::init(const std::string& s, std::initializer_list<NBT_ptr_t> v)$/;"	f	class:NBT::NBTList	signature:(const std::string& s, std::initializer_list<NBT_ptr_t> v)
NBT::NBTList::init	NBT/NBT.h	/^			void init(const std::string& , T, T);$/;"	p	class:NBT::NBTList	access:private	signature:(const std::string& , T, T)
NBT::NBTList::init	NBT/NBT.h	/^			void init(const std::string& , std::initializer_list<NBT_ptr_t>);$/;"	p	class:NBT::NBTList	access:private	signature:(const std::string& , std::initializer_list<NBT_ptr_t>)
NBT::NBTList::init	NBT/NBT.h	/^	void NBTList<ID>::init(const std::string& s, I i1, I i2)$/;"	f	class:NBT::NBTList	signature:(const std::string& s, I i1, I i2)
NBT::NBTList::iterator	NBT/NBT.h	/^			class iterator$/;"	c	class:NBT::NBTList	access:public
NBT::NBTList::iterator::i	NBT/NBT.h	/^					std::vector<NBT_ptr_t>::iterator i;$/;"	m	class:NBT::NBTList::iterator	access:private
NBT::NBTList::iterator::iterator	NBT/NBT.h	/^					iterator(std::vector<NBT_ptr_t>::iterator _i) : i(_i) { }$/;"	f	class:NBT::NBTList::iterator	access:private	signature:(std::vector<NBT_ptr_t>::iterator _i)
NBT::NBTList::iterator::operator !=	NBT/NBT.h	/^					bool operator!=(const iterator& _i) { return i != _i.i; }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:(const iterator& _i)
NBT::NBTList::iterator::operator *	NBT/NBT.h	/^					std::shared_ptr<T> operator*() { return std::dynamic_pointer_cast<T>(*i); }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:()
NBT::NBTList::iterator::operator ++	NBT/NBT.h	/^					iterator<T>& operator++() { ++i; return *this; }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:()
NBT::NBTList::iterator::operator ->	NBT/NBT.h	/^					T& operator->() { return *operator*(); }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:()
NBT::NBTList::iterator::operator ==	NBT/NBT.h	/^					bool operator==(const iterator& _i) { return i == _i.i; }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:(const iterator& _i)
NBT::NBTList::ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTList<ID>> ptr_t;$/;"	t	class:NBT::NBTList	access:public
NBT::NBTList::tagIds	NBT/NBT.h	/^			BYTE tagIds;$/;"	m	class:NBT::NBTList	access:private
NBT::NBTList::vec_t	NBT/NBT.h	/^		typedef std::vector<NBT_ptr_t> vec_t;$/;"	t	class:NBT::NBTList	access:private
NBT::NBTSimple	NBT/NBT.h	/^	class NBTSimple : public _NBTBase<ID>$/;"	c	namespace:NBT	inherits:_NBTBase
NBT::NBTSimple::NBTSimple	NBT/NBT.h	/^			NBTSimple(T t) { init("", t); }$/;"	f	class:NBT::NBTSimple	access:public	signature:(T t)
NBT::NBTSimple::NBTSimple	NBT/NBT.h	/^			NBTSimple(const std::string& s = "", T t = T()) { init(s, t); }$/;"	f	class:NBT::NBTSimple	access:public	signature:(const std::string& s = Ó, T t = T())
NBT::NBTSimple::_read	NBT/NBT.cc	/^	void NBTSimple<ID, T>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTSimple	signature:(const nbtistream& is)
NBT::NBTSimple::_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTSimple	access:protected	signature:(const nbtistream&)
NBT::NBTSimple::_write	NBT/NBT.cc	/^	void NBTSimple<ID, T>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTSimple	signature:(const nbtostream& os)
NBT::NBTSimple::_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTSimple	access:protected	signature:(const nbtostream&)
NBT::NBTSimple::get	NBT/NBT.h	/^			T get(void) { return value; }$/;"	f	class:NBT::NBTSimple	access:public	signature:(void)
NBT::NBTSimple::init	NBT/NBT.cc	/^	void NBTSimple<ID, T>::init(const std::string& s, T t)$/;"	f	class:NBT::NBTSimple	signature:(const std::string& s, T t)
NBT::NBTSimple::init	NBT/NBT.h	/^			void init(const std::string& , T);$/;"	p	class:NBT::NBTSimple	access:private	signature:(const std::string& , T)
NBT::NBTSimple::ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTSimple<ID, T>> ptr_t;$/;"	t	class:NBT::NBTSimple	access:public
NBT::NBTSimple::set	NBT/NBT.h	/^			void set(T t) { value = t; }$/;"	f	class:NBT::NBTSimple	access:public	signature:(T t)
NBT::NBTSimple::value	NBT/NBT.h	/^			T value;$/;"	m	class:NBT::NBTSimple	access:private
NBT::NBTString	NBT/NBT.h	/^	class NBTString : public NBTArray<ID, WORD, BYTE>$/;"	c	namespace:NBT	inherits:NBTArray
NBT::NBTString::NBTString	NBT/NBT.h	/^			NBTString(const std::string& s = "") : NBTArray<ID, WORD, BYTE>(s) { }$/;"	f	class:NBT::NBTString	access:public	signature:(const std::string& s = Ó)
NBT::NBTString::NBTString	NBT/NBT.h	/^			NBTString(const std::string& s, const std::string& v) : $/;"	f	class:NBT::NBTString	access:public	signature:(const std::string& s, const std::string& v)
NBT::NBTString::get	NBT/NBT.h	/^			const std::string get() { return std::string(vec_t::begin(), vec_t::end()); }$/;"	f	class:NBT::NBTString	access:public	signature:()
NBT::NBTString::ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTString<ID>> ptr_t;$/;"	t	class:NBT::NBTString	access:public
NBT::NBTString::vec_t	NBT/NBT.h	/^		typedef std::vector<BYTE> vec_t;$/;"	t	class:NBT::NBTString	access:private
NBT::NBTTagCompound	NBT/NBT.h	/^	class NBTTagCompound : public _NBTBase<ID>, protected std::map<std::string, NBT_ptr_t>$/;"	c	namespace:NBT	inherits:_NBTBase,std::map
NBT::NBTTagCompound::NBTBase::setName	NBT/NBT.h	/^			NBTTagCompound(const std::string& s = "") : Names(*this), Tags(*this) { NBTBase::setName(s); }$/;"	p	class:NBT::NBTTagCompound::NBTBase	signature:(s)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(C<NBT_ptr_t>& c) : Names(*this), Tags(*this) { init("", c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(C<NBT_ptr_t>& c)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(T t1, T t2) : Names(*this), Tags(*this) { init("", t1, t2); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(T t1, T t2)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s = "") : Names(*this), Tags(*this) { NBTBase::setName(s); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s = Ó)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s, C<NBT_ptr_t> c) : Names(*this), Tags(*this) { init(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, C<NBT_ptr_t> c)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s, T t1, T t2) : Names(*this), Tags(*this) { init(s, t1, t2); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, T t1, T t2)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s, std::initializer_list<NBT_ptr_t> v) : Names(*this), Tags(*this) { init(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, std::initializer_list<NBT_ptr_t> v)
NBT::NBTTagCompound::NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(std::initializer_list<NBT_ptr_t> v) : Names(*this), Tags(*this) { init("", v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(std::initializer_list<NBT_ptr_t> v)
NBT::NBTTagCompound::NBT_ptr_t	NBT/NBT.h	/^				void setCompoundTag(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Compound(s, i1, i2))); }$/;"	p	signature:(new TAG_Compound(s, i1, i2))
NBT::NBTTagCompound::NBT_ptr_t	NBT/NBT.h	/^				void setTagList(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_List(s, i1, i2))); }$/;"	p	signature:(new TAG_List(s, i1, i2))
NBT::NBTTagCompound::NBT_ptr_t	NBT/NBT.h	/^			template<typename I> void setByteArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Byte_Array(s, i1, i2))); }$/;"	p	signature:(new TAG_Byte_Array(s, i1, i2))
NBT::NBTTagCompound::NBT_ptr_t	NBT/NBT.h	/^			template<typename I> void setIntArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Int_Array(s, i1, i2))); }$/;"	p	signature:(new TAG_Int_Array(s, i1, i2))
NBT::NBTTagCompound::NBT_ptr_t	NBT/NBT.h	/^			void setString(const std::string& name, const std::string& s) { setTag(NBT_ptr_t(new TAG_String(name, s))); }$/;"	p	signature:(new TAG_String(name, s))
NBT::NBTTagCompound::Names	NBT/NBT.h	/^			class Names$/;"	c	class:NBT::NBTTagCompound	access:public
NBT::NBTTagCompound::Names	NBT/NBT.h	/^			} Names;$/;"	m	class:NBT::NBTTagCompound	typeref:class:NBT::NBTTagCompound::Names	access:public
NBT::NBTTagCompound::Names::Names	NBT/NBT.h	/^					Names(NBTTagCompound<ID>& tc) : _tc(tc) { }$/;"	f	class:NBT::NBTTagCompound::Names	access:private	signature:(NBTTagCompound<ID>& tc)
NBT::NBTTagCompound::Names::_tc	NBT/NBT.h	/^					NBTTagCompound<ID> &_tc;$/;"	m	class:NBT::NBTTagCompound::Names	access:private
NBT::NBTTagCompound::Names::begin	NBT/NBT.h	/^					iterator begin() { return iterator(_tc.begin()); }$/;"	f	class:NBT::NBTTagCompound::Names	access:public	signature:()
NBT::NBTTagCompound::Names::end	NBT/NBT.h	/^					iterator end() { return iterator(_tc.end()); }$/;"	f	class:NBT::NBTTagCompound::Names	access:public	signature:()
NBT::NBTTagCompound::Names::iterator	NBT/NBT.h	/^					class iterator$/;"	c	class:NBT::NBTTagCompound::Names	access:public
NBT::NBTTagCompound::Names::iterator::_i	NBT/NBT.h	/^							std::map<std::string, NBT_ptr_t>::iterator _i;$/;"	m	class:NBT::NBTTagCompound::Names::iterator	access:private
NBT::NBTTagCompound::Names::iterator::iterator	NBT/NBT.h	/^							iterator(std::map<std::string, NBT_ptr_t>::iterator i) : _i(i) { }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:private	signature:(std::map<std::string, NBT_ptr_t>::iterator i)
NBT::NBTTagCompound::Names::iterator::operator !=	NBT/NBT.h	/^							bool operator!=(const iterator& i) { return !operator==(i); }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:(const iterator& i)
NBT::NBTTagCompound::Names::iterator::operator *	NBT/NBT.h	/^							std::string operator*() { return _i->first; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:()
NBT::NBTTagCompound::Names::iterator::operator ++	NBT/NBT.h	/^							iterator& operator++() { ++_i; return *this; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:()
NBT::NBTTagCompound::Names::iterator::operator ->	NBT/NBT.h	/^							const std::string *operator->() { return &_i->first; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:()
NBT::NBTTagCompound::Names::iterator::operator ==	NBT/NBT.h	/^							bool operator==(const iterator& i) { return _i == i._i; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:(const iterator& i)
NBT::NBTTagCompound::Tags	NBT/NBT.h	/^			class Tags$/;"	c	class:NBT::NBTTagCompound	access:public
NBT::NBTTagCompound::Tags	NBT/NBT.h	/^			} Tags;$/;"	m	class:NBT::NBTTagCompound	typeref:class:NBT::NBTTagCompound::Tags	access:public
NBT::NBTTagCompound::Tags::Tags	NBT/NBT.h	/^					Tags(NBTTagCompound<ID>& tc) : _tc(tc) { }$/;"	f	class:NBT::NBTTagCompound::Tags	access:private	signature:(NBTTagCompound<ID>& tc)
NBT::NBTTagCompound::Tags::_tc	NBT/NBT.h	/^					NBTTagCompound<ID> &_tc;$/;"	m	class:NBT::NBTTagCompound::Tags	access:private
NBT::NBTTagCompound::Tags::begin	NBT/NBT.h	/^					iterator begin() { return iterator(_tc.begin()); }$/;"	f	class:NBT::NBTTagCompound::Tags	access:public	signature:()
NBT::NBTTagCompound::Tags::end	NBT/NBT.h	/^					iterator end() { return iterator(_tc.end()); }$/;"	f	class:NBT::NBTTagCompound::Tags	access:public	signature:()
NBT::NBTTagCompound::Tags::iterator	NBT/NBT.h	/^					class iterator$/;"	c	class:NBT::NBTTagCompound::Tags	access:public
NBT::NBTTagCompound::Tags::iterator::_i	NBT/NBT.h	/^							std::map<std::string, NBT_ptr_t>::iterator _i;$/;"	m	class:NBT::NBTTagCompound::Tags::iterator	access:private
NBT::NBTTagCompound::Tags::iterator::iterator	NBT/NBT.h	/^							iterator(std::map<std::string, NBT_ptr_t>::iterator i) : _i(i) { }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:private	signature:(std::map<std::string, NBT_ptr_t>::iterator i)
NBT::NBTTagCompound::Tags::iterator::operator !=	NBT/NBT.h	/^							bool operator!=(const iterator& i) { return !operator==(i); }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:(const iterator& i)
NBT::NBTTagCompound::Tags::iterator::operator *	NBT/NBT.h	/^							NBT_ptr_t operator*() { return _i->second; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:()
NBT::NBTTagCompound::Tags::iterator::operator ++	NBT/NBT.h	/^							iterator& operator++() { ++_i; return *this; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:()
NBT::NBTTagCompound::Tags::iterator::operator ->	NBT/NBT.h	/^							NBT_ptr_t operator->() { return _i->second; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:()
NBT::NBTTagCompound::Tags::iterator::operator ==	NBT/NBT.h	/^							bool operator==(const iterator& i) { return _i == i._i; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:(const iterator& i)
NBT::NBTTagCompound::_read	NBT/NBT.cc	/^	void NBTTagCompound<ID>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTTagCompound	signature:(const nbtistream& is)
NBT::NBTTagCompound::_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTTagCompound	access:protected	signature:(const nbtistream&)
NBT::NBTTagCompound::_write	NBT/NBT.cc	/^	void NBTTagCompound<ID>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTTagCompound	signature:(const nbtostream& os)
NBT::NBTTagCompound::_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTTagCompound	access:protected	signature:(const nbtostream&)
NBT::NBTTagCompound::empty	NBT/NBT.h	/^			bool empty( ) { return map_t::empty(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:( )
NBT::NBTTagCompound::getByte	NBT/NBT.h	/^			BYTE getByte(const std::string& s) { return getTag<TAG_Byte>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getByteArray	NBT/NBT.h	/^			const std::vector<BYTE> getByteArray(const std::string& s) { return getTag<TAG_Byte_Array>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getCompoundTag	NBT/NBT.h	/^			ptr_t getCompoundTag(const std::string& s) { return getTag<TAG_Compound>(s); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getDouble	NBT/NBT.h	/^			double getDouble(const std::string& s) { return getTag<TAG_Double>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getFloat	NBT/NBT.h	/^			float getFloat(const std::string& s) { return getTag<TAG_Float>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getInt	NBT/NBT.h	/^			DWORD getInt(const std::string& s) { return getTag<TAG_Int>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getIntArray	NBT/NBT.h	/^			const std::vector<DWORD> getIntArray(const std::string& s) { return std::dynamic_pointer_cast<TAG_Int_Array>(map_t::operator[](s))->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getLong	NBT/NBT.h	/^			QWORD getLong(const std::string& s) { return getTag<TAG_Long>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getShort	NBT/NBT.h	/^			WORD getShort(const std::string& s) { return getTag<TAG_Short>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getString	NBT/NBT.h	/^			const std::string getString(const std::string& s) { return getTag<TAG_String>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getTag	NBT/NBT.h	/^			NBT_ptr_t getTag(const std::string& s) { return hasTag(s) ? map_t::operator[](s) : NBT_ptr_t(NULL); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getTag	NBT/NBT.h	/^			template<typename T> std::shared_ptr<T> getTag(const std::string& s) { return std::dynamic_pointer_cast<T>(getTag(s)); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::getTagList	NBT/NBT.h	/^			TAG_List::ptr_t getTagList(const std::string& s) { return getTag<TAG_List>(s); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::hasTag	NBT/NBT.h	/^			bool hasTag(const std::string& s) { return map_t::count(s) > 0; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::init	NBT/NBT.cc	/^	void NBTTagCompound<ID>::init(const std::string& name, std::initializer_list<NBT_ptr_t> v)$/;"	f	class:NBT::NBTTagCompound	signature:(const std::string& name, std::initializer_list<NBT_ptr_t> v)
NBT::NBTTagCompound::init	NBT/NBT.h	/^			template<typename T> void init(const std::string&, T, T);$/;"	p	class:NBT::NBTTagCompound	access:private	signature:(const std::string&, T, T)
NBT::NBTTagCompound::init	NBT/NBT.h	/^			void init(const std::string&);$/;"	p	class:NBT::NBTTagCompound	access:private	signature:(const std::string&)
NBT::NBTTagCompound::init	NBT/NBT.h	/^			void init(const std::string&, std::initializer_list<NBT_ptr_t>);$/;"	p	class:NBT::NBTTagCompound	access:private	signature:(const std::string&, std::initializer_list<NBT_ptr_t>)
NBT::NBTTagCompound::init	NBT/NBT.h	/^	void NBTTagCompound<ID>::init(const std::string& name, I i1, I i2)$/;"	f	class:NBT::NBTTagCompound	signature:(const std::string& name, I i1, I i2)
NBT::NBTTagCompound::map_t	NBT/NBT.h	/^		typedef std::map<std::string, NBT_ptr_t> map_t;$/;"	t	class:NBT::NBTTagCompound	access:private
NBT::NBTTagCompound::ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTTagCompound<ID>> ptr_t;$/;"	t	class:NBT::NBTTagCompound	access:public
NBT::NBTTagCompound::removeTag	NBT/NBT.h	/^			bool removeTag(const std::string& s) { return hasTag(s) ? map_t::erase(s) : false; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
NBT::NBTTagCompound::set	NBT/NBT.h	/^			template<typename T> void set(const std::string& name, T t)$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& name, T t)
NBT::NBTTagCompound::setByte	NBT/NBT.h	/^			void setByte(const std::string& s, BYTE v) { set<BYTE>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, BYTE v)
NBT::NBTTagCompound::setByteArray	NBT/NBT.h	/^				void setByteArray(const std::string&s, C<BYTE> c) { setByteArray<C<BYTE>::iterator>(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, C<BYTE> c)
NBT::NBTTagCompound::setByteArray	NBT/NBT.h	/^			template<typename I> void setByteArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Byte_Array(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
NBT::NBTTagCompound::setByteArray	NBT/NBT.h	/^			void setByteArray(const std::string&s, BYTE *v, int n) { assert(n>0&&v); setByteArray<BYTE *>(s, v, v + n); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, BYTE *v, int n)
NBT::NBTTagCompound::setCompoundTag	NBT/NBT.h	/^				void setCompoundTag(const std::string& s, C<NBT_ptr_t> c) { setCompoundTag(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, C<NBT_ptr_t> c)
NBT::NBTTagCompound::setCompoundTag	NBT/NBT.h	/^				void setCompoundTag(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Compound(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
NBT::NBTTagCompound::setCompoundTag	NBT/NBT.h	/^			void setCompoundTag(TAG_Compound_ptr_t p) { setTag<TAG_Compound>(p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(TAG_Compound_ptr_t p)
NBT::NBTTagCompound::setCompoundTag	NBT/NBT.h	/^			void setCompoundTag(const std::string& s, TAG_Compound_ptr_t p) { setTag<TAG_Compound>(s, p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, TAG_Compound_ptr_t p)
NBT::NBTTagCompound::setDouble	NBT/NBT.h	/^			void setDouble(const std::string& s, double v) { set<double>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, double v)
NBT::NBTTagCompound::setFloat	NBT/NBT.h	/^			void setFloat(const std::string& s, float v) { set<float>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, float v)
NBT::NBTTagCompound::setInt	NBT/NBT.h	/^			void setInt(const std::string& s, DWORD v) { set<DWORD>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, DWORD v)
NBT::NBTTagCompound::setIntArray	NBT/NBT.h	/^				void setIntArray(const std::string&s, C<DWORD> c) { setIntArray<C<DWORD>::iterator>(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, C<DWORD> c)
NBT::NBTTagCompound::setIntArray	NBT/NBT.h	/^			template<typename I> void setIntArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Int_Array(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
NBT::NBTTagCompound::setIntArray	NBT/NBT.h	/^			void setIntArray(const std::string&s, DWORD *v, int n) { assert(n>0&&v); setIntArray<DWORD *>(s, v, v + n); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, DWORD *v, int n)
NBT::NBTTagCompound::setLong	NBT/NBT.h	/^			void setLong(const std::string& s, QWORD v) { set<QWORD>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, QWORD v)
NBT::NBTTagCompound::setName	NBT/NBT.h	/^				{ p->setName(name); map_t::operator[](name) = std::dynamic_pointer_cast<NBTBase>(p); }$/;"	p	signature:(name)
NBT::NBTTagCompound::setName	NBT/NBT.h	/^			void setTag(const std::string& s, NBT_ptr_t p) { p->setName(s); map_t::operator[](s) = p; }$/;"	p	signature:(s)
NBT::NBTTagCompound::setShort	NBT/NBT.h	/^			void setShort(const std::string& s, WORD v) { set<WORD>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, WORD v)
NBT::NBTTagCompound::setString	NBT/NBT.h	/^			void setString(const std::string& name, const std::string& s) { setTag(NBT_ptr_t(new TAG_String(name, s))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& name, const std::string& s)
NBT::NBTTagCompound::setTag	NBT/NBT.h	/^			template<typename T> void setTag(const std::string& name, std::shared_ptr<T> p)$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& name, std::shared_ptr<T> p)
NBT::NBTTagCompound::setTag	NBT/NBT.h	/^			template<typename T> void setTag(std::shared_ptr<T> p)$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(std::shared_ptr<T> p)
NBT::NBTTagCompound::setTag	NBT/NBT.h	/^			void setTag(NBT_ptr_t p) { map_t::operator[](p->getName()) = p; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(NBT_ptr_t p)
NBT::NBTTagCompound::setTag	NBT/NBT.h	/^			void setTag(const std::string& s, NBT_ptr_t p) { p->setName(s); map_t::operator[](s) = p; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, NBT_ptr_t p)
NBT::NBTTagCompound::setTagList	NBT/NBT.h	/^				void setTagList(const std::string& s, C<NBT_ptr_t> c) { setTagList(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, C<NBT_ptr_t> c)
NBT::NBTTagCompound::setTagList	NBT/NBT.h	/^				void setTagList(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_List(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
NBT::NBTTagCompound::setTagList	NBT/NBT.h	/^			void setTagList(TAG_List::ptr_t p) { setTag<TAG_List>(p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(TAG_List::ptr_t p)
NBT::NBTTagCompound::setTagList	NBT/NBT.h	/^			void setTagList(const std::string& s, TAG_List::ptr_t p) { setTag<TAG_List>(s, p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, TAG_List::ptr_t p)
NBT::NBT_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<NBTBase> NBT_ptr_t;$/;"	t	namespace:NBT
NBT::QWORD	NBT/common.h	/^	typedef std::uint64_t QWORD;$/;"	t	namespace:NBT
NBT::Read	NBT/NBT.h	/^	TAG_Compound_ptr_t Read(T& t)$/;"	f	namespace:NBT	signature:(T& t)
NBT::SHORT	NBT/common.h	/^	typedef WORD  SHORT;$/;"	t	namespace:NBT
NBT::TAG_Byte	NBT/common.h	/^	typedef NBTSimple		<1, BYTE> 			TAG_Byte;$/;"	t	namespace:NBT
NBT::TAG_Byte_Array	NBT/common.h	/^	typedef NBTArray		<7, DWORD, BYTE> 	TAG_Byte_Array;$/;"	t	namespace:NBT
NBT::TAG_Byte_Array_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Byte_Array>	TAG_Byte_Array_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Byte_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Byte>		TAG_Byte_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Compound	NBT/common.h	/^	typedef NBTTagCompound	<10> 				TAG_Compound;$/;"	t	namespace:NBT
NBT::TAG_Compound_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Compound>	TAG_Compound_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Double	NBT/common.h	/^	typedef NBTSimple		<6, double> 		TAG_Double;$/;"	t	namespace:NBT
NBT::TAG_Double_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Double>		TAG_Double_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Float	NBT/common.h	/^	typedef NBTSimple		<5, float>	 		TAG_Float;$/;"	t	namespace:NBT
NBT::TAG_Float_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Float>		TAG_Float_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Int	NBT/common.h	/^	typedef NBTSimple		<3, DWORD> 			TAG_Int;$/;"	t	namespace:NBT
NBT::TAG_Int_Array	NBT/common.h	/^	typedef NBTArray		<11, DWORD, DWORD> 	TAG_Int_Array;$/;"	t	namespace:NBT
NBT::TAG_Int_Array_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Int_Array>	TAG_Int_Array_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Int_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Int>		TAG_Int_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_List	NBT/common.h	/^	typedef NBTList			<9> 				TAG_List;$/;"	t	namespace:NBT
NBT::TAG_List_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_List>		TAG_List_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Long	NBT/common.h	/^	typedef NBTSimple		<4, QWORD> 			TAG_Long;$/;"	t	namespace:NBT
NBT::TAG_Long_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Long>		TAG_Long_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_Short	NBT/common.h	/^	typedef NBTSimple		<2, WORD> 			TAG_Short;$/;"	t	namespace:NBT
NBT::TAG_Short_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Short>		TAG_Short_ptr_t;$/;"	t	namespace:NBT
NBT::TAG_String	NBT/common.h	/^	typedef NBTString		<8> 				TAG_String;$/;"	t	namespace:NBT
NBT::TAG_String_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_String>		TAG_String_ptr_t;$/;"	t	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<10> { typedef TAG_Compound type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<11> { typedef TAG_Int_Array type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<1>  { typedef TAG_Byte type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<2>  { typedef TAG_Short type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<3>  { typedef TAG_Int type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<4>  { typedef TAG_Long type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<5>  { typedef TAG_Float type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<6>  { typedef TAG_Double type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<7>  { typedef TAG_Byte_Array type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<8>  { typedef TAG_String type; };$/;"	s	namespace:NBT
NBT::TypeTable	NBT/common.h	/^	template<> struct TypeTable<9>  { typedef TAG_List type; };$/;"	s	namespace:NBT
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<10> { typedef TAG_Compound type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<11> { typedef TAG_Int_Array type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<1>  { typedef TAG_Byte type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<2>  { typedef TAG_Short type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<3>  { typedef TAG_Int type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<4>  { typedef TAG_Long type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<5>  { typedef TAG_Float type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<6>  { typedef TAG_Double type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<7>  { typedef TAG_Byte_Array type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<8>  { typedef TAG_String type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::TypeTable::type	NBT/common.h	/^	template<> struct TypeTable<9>  { typedef TAG_List type; };$/;"	t	struct:NBT::TypeTable	access:public
NBT::WORD	NBT/common.h	/^	typedef std::uint16_t  WORD;$/;"	t	namespace:NBT
NBT::_NBTBase	NBT/NBT.h	/^	class _NBTBase : public NBTBase$/;"	c	namespace:NBT	inherits:NBTBase
NBT::_NBTBase::ID	NBT/NBT.h	/^			static const BYTE ID;$/;"	m	class:NBT::_NBTBase	access:public
NBT::_NBTBase::ID	NBT/NBT.h	/^	const BYTE _NBTBase<id>::ID = id;$/;"	m	class:NBT::_NBTBase
NBT::_NBTBase::getID	NBT/NBT.h	/^			BYTE getID(void)$/;"	f	class:NBT::_NBTBase	access:public	signature:(void)
NBT::_b	NBT/Reader.cc	/^		BYTE *_b = new BYTE[_n];$/;"	l
NBT::_b	NBT/Reader.cc	/^		BYTE *_b = new BYTE[n];$/;"	l
NBT::_b	NBT/Writer.cc	/^		BYTE *_b = new BYTE[n];$/;"	l
NBT::_d	NBT/Reader.cc	/^		char *_d = d;$/;"	l
NBT::_n	NBT/Reader.cc	/^		int _n = (int) n;$/;"	l
NBT::_read	NBT/NBT.cc	/^			nbt->_read(is);$/;"	p	file:	signature:(is)
NBT::_write	NBT/NBT.cc	/^			nbt->_write(os);$/;"	p	file:	signature:(os)
NBT::b	NBT/NBT.cc	/^			NBTBase *b = NBTHelper::Instance().Read(is);$/;"	l
NBT::basic_nbt_reader	NBT/Reader.h	/^	class basic_nbt_reader$/;"	c	namespace:NBT
NBT::basic_nbt_reader::do_read	NBT/Reader.h	/^			virtual void do_read(char *, size_t) const = 0;$/;"	p	class:NBT::basic_nbt_reader	access:protected	signature:(char *, size_t) const
NBT::basic_nbt_reader::n	NBT/Reader.h	/^				do_read(reinterpret_cast<char *>(d), n);$/;"	l
NBT::basic_nbt_reader::read	NBT/Reader.h	/^			T read() const;$/;"	p	class:NBT::basic_nbt_reader	access:public	signature:() const
NBT::basic_nbt_reader::read	NBT/Reader.h	/^			void read(BYTE *d, size_t n) const$/;"	f	class:NBT::basic_nbt_reader	access:public	signature:(BYTE *d, size_t n) const
NBT::basic_nbt_reader::read	NBT/Reader.h	/^	T basic_nbt_reader::read(void) const$/;"	f	class:NBT::basic_nbt_reader	signature:(void) const
NBT::basic_nbt_reader::reinterpret_cast	NBT/Reader.h	/^				do_read(reinterpret_cast<char *>(d), n);$/;"	p	signature:(d)
NBT::basic_nbt_writer	NBT/Writer.h	/^	class basic_nbt_writer$/;"	c	namespace:NBT
NBT::basic_nbt_writer::do_write	NBT/Writer.h	/^			virtual void do_write(char *, size_t) const = 0;$/;"	p	class:NBT::basic_nbt_writer	access:protected	signature:(char *, size_t) const
NBT::basic_nbt_writer::n	NBT/Writer.h	/^				do_write(reinterpret_cast<char *>(d), n);$/;"	l
NBT::basic_nbt_writer::reinterpret_cast	NBT/Writer.h	/^				do_write(reinterpret_cast<char *>(d), n);$/;"	p	signature:(d)
NBT::basic_nbt_writer::write	NBT/Writer.h	/^			void write(BYTE *d, size_t n) const$/;"	f	class:NBT::basic_nbt_writer	access:public	signature:(BYTE *d, size_t n) const
NBT::basic_nbt_writer::write	NBT/Writer.h	/^			void write(T) const;$/;"	p	class:NBT::basic_nbt_writer	access:public	signature:(T) const
NBT::basic_nbt_writer::write	NBT/Writer.h	/^	void basic_nbt_writer::write(T t) const$/;"	f	class:NBT::basic_nbt_writer	signature:(T t) const
NBT::d	NBT/Writer.cc	/^		while(n--) os << *d++;$/;"	l
NBT::getID	NBT/NBT.cc	/^		os.write<BYTE>(getID());$/;"	p	file:	signature:()
NBT::l	NBT/NBT.cc	/^		size_t l = is.read<WORD>();$/;"	l
NBT::length	NBT/NBT.cc	/^		size_t length = static_cast<size_t>(is.read<DWORD>());$/;"	l
NBT::length	NBT/NBT.cc	/^		size_t length = static_cast<size_t>(is.read<T1>());$/;"	l
NBT::length	NBT/NBT.h	/^		DWORD length = 0;$/;"	l
NBT::map_t::clear	NBT/NBT.cc	/^		map_t::clear();$/;"	p	class:NBT::map_t	file:	signature:()
NBT::map_t::clear	NBT/NBT.h	/^		map_t::clear();$/;"	p	class:NBT::map_t	signature:()
NBT::nbt	NBT/NBT.cc	/^			NBT_ptr_t nbt = *i;$/;"	l
NBT::nbt_gzip_reader	NBT/NBT.cc	/^		read(nbt_gzip_reader(is));$/;"	p	file:	signature:(is)
NBT::nbt_gzip_reader	NBT/Reader.h	/^	typedef nbt_reader<gzip::igzstream> nbt_gzip_reader;$/;"	t	namespace:NBT
NBT::nbt_gzip_writer	NBT/NBT.cc	/^		write(nbt_gzip_writer(os));$/;"	p	file:	signature:(os)
NBT::nbt_gzip_writer	NBT/Writer.h	/^	typedef nbt_writer<gzip::ogzstream> nbt_gzip_writer;$/;"	t	namespace:NBT
NBT::nbt_reader	NBT/Reader.h	/^	class nbt_reader : public basic_nbt_reader$/;"	c	namespace:NBT	inherits:basic_nbt_reader
NBT::nbt_reader::do_read	NBT/Reader.cc	/^	void nbt_reader<gzip::igzstream>::do_read(char *d, size_t n) const$/;"	f	class:NBT::nbt_reader	signature:(char *d, size_t n) const
NBT::nbt_reader::do_read	NBT/Reader.cc	/^	void nbt_reader<std::istream>::do_read(char *d, size_t n) const$/;"	f	class:NBT::nbt_reader	signature:(char *d, size_t n) const
NBT::nbt_reader::do_read	NBT/Reader.h	/^			void do_read(char *, size_t) const;$/;"	p	class:NBT::nbt_reader	access:protected	signature:(char *, size_t) const
NBT::nbt_reader::is	NBT/Reader.h	/^			T &is;$/;"	m	class:NBT::nbt_reader	access:private
NBT::nbt_reader::nbt_reader	NBT/Reader.h	/^			nbt_reader(T& t) : is(t) { }$/;"	f	class:NBT::nbt_reader	access:public	signature:(T& t)
NBT::nbt_std_reader	NBT/NBT.cc	/^		read(nbt_std_reader(is));$/;"	p	file:	signature:(is)
NBT::nbt_std_reader	NBT/Reader.h	/^	typedef nbt_reader<std::istream> nbt_std_reader;$/;"	t	namespace:NBT
NBT::nbt_std_writer	NBT/NBT.cc	/^		write(nbt_std_writer(os));$/;"	p	file:	signature:(os)
NBT::nbt_std_writer	NBT/Writer.h	/^	typedef nbt_writer<std::ostream> nbt_std_writer;$/;"	t	namespace:NBT
NBT::nbt_writer	NBT/Writer.h	/^	class nbt_writer : public basic_nbt_writer$/;"	c	namespace:NBT	inherits:basic_nbt_writer
NBT::nbt_writer::do_write	NBT/Writer.cc	/^	void nbt_writer<gzip::ogzstream>::do_write(char *d, size_t n) const$/;"	f	class:NBT::nbt_writer	signature:(char *d, size_t n) const
NBT::nbt_writer::do_write	NBT/Writer.cc	/^	void nbt_writer<std::ostream>::do_write(char *d, size_t n) const$/;"	f	class:NBT::nbt_writer	signature:(char *d, size_t n) const
NBT::nbt_writer::do_write	NBT/Writer.h	/^			void do_write(char *, size_t) const;$/;"	p	class:NBT::nbt_writer	access:protected	signature:(char *, size_t) const
NBT::nbt_writer::nbt_writer	NBT/Writer.h	/^			nbt_writer(T& t) : os(t) { }$/;"	f	class:NBT::nbt_writer	access:public	signature:(T& t)
NBT::nbt_writer::os	NBT/Writer.h	/^			T &os;$/;"	m	class:NBT::nbt_writer	access:private
NBT::nbth	NBT/NBT.cc	/^		static NBTHelper nbth;$/;"	l	file:
NBT::nbtistream	NBT/Reader.h	/^	typedef basic_nbt_reader nbtistream;$/;"	t	namespace:NBT
NBT::nbtostream	NBT/Writer.h	/^	typedef basic_nbt_writer nbtostream;$/;"	t	namespace:NBT
NBT::read	NBT/NBT.cc	/^		if(l) is.read(name, l);$/;"	p	file:	signature:(name, l)
NBT::read	NBT/Reader.cc	/^		is.read(d, n);$/;"	p	file:	signature:(d, n)
NBT::s	NBT/NBT.cc	/^			std::string s = nbt->getName();$/;"	l
NBT::s	NBT/NBT.h	/^			std::string s = (*i1)->NBTBase::getName();$/;"	l
NBT::sizeof	NBT/Reader.h	/^		do_read(reinterpret_cast<char *>(&t), sizeof(T));$/;"	p	signature:(T)
NBT::sizeof	NBT/Writer.h	/^		do_write(reinterpret_cast<char *>(&t), sizeof(T));$/;"	p	signature:(T)
NBT::static_cast	NBT/NBT.cc	/^		os.write<DWORD>(static_cast<DWORD>(vec_t::size()));$/;"	p	file:	signature:(vec_t::size(
NBT::static_cast	NBT/NBT.cc	/^		os.write<T1>(static_cast<T1>(vec_t::size()));$/;"	p	file:	signature:(vec_t::size(
NBT::std::endl	NBT/Reader.cc	/^		std::cerr << std::endl;$/;"	m	class:NBT::std	file:
NBT::std::endl	NBT/Writer.cc	/^		std::cerr << std::endl;$/;"	m	class:NBT::std	file:
NBT::strlen	NBT/NBT.cc	/^		os.write<WORD>(strlen(reinterpret_cast<char *>(name)));$/;"	p	file:	signature:(reinterpret_cast<char *>(
NBT::t	NBT/Reader.h	/^		T t;$/;"	l
NBT::vec_t::clear	NBT/NBT.cc	/^		vec_t::clear();$/;"	p	class:NBT::vec_t	file:	signature:()
NBT::vec_t::clear	NBT/NBT.h	/^		vec_t::clear();$/;"	p	class:NBT::vec_t	signature:()
NBT::vec_t::push_back	NBT/NBT.cc	/^			vec_t::push_back(is.read<T2>());$/;"	p	class:NBT::vec_t	file:	signature:(is.read<T2>())
NBT::vec_t::push_back	NBT/NBT.cc	/^			vec_t::push_back(nbt);$/;"	p	class:NBT::vec_t	file:	signature:(nbt)
NBT::vec_t::push_back	NBT/NBT.cc	/^			vec_t::push_back(t2);$/;"	p	class:NBT::vec_t	file:	signature:(t2)
NBT::vec_t::reserve	NBT/NBT.cc	/^		vec_t::reserve(length);$/;"	p	class:NBT::vec_t	file:	signature:(length)
NBT::vec_t::reserve	NBT/NBT.cc	/^		vec_t::reserve(v.size());$/;"	p	class:NBT::vec_t	file:	signature:(v.size())
NBT::write	NBT/NBT.cc	/^			i->second->write(os);$/;"	p	file:	signature:(os)
NBT::write	NBT/NBT.cc	/^			os.write(name, strlen(reinterpret_cast<char *>(name)));$/;"	p	file:	signature:(name, strlen(reinterpret_cast<char *>(name)))
NBT::write	NBT/NBT.cc	/^			os.write<T2>(v);$/;"	p	file:	signature:(v)
NBT::write	NBT/NBT.cc	/^		os.write<T>(value);$/;"	p	file:	signature:(value)
NBT::write	NBT/Writer.cc	/^		os.write(d, n);$/;"	p	file:	signature:(d, n)
NBTArray	NBT/NBT.h	/^			NBTArray(C<NBT_ptr_t>& c) { init("", c.begin(), c.end()); }$/;"	f	class:NBT::NBTArray	access:public	signature:(C<NBT_ptr_t>& c)
NBTArray	NBT/NBT.h	/^			NBTArray(T t1, T t2) { init("", t1, t2); }$/;"	f	class:NBT::NBTArray	access:public	signature:(T t1, T t2)
NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s = "") { NBTBase::setName(s); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s = Ó)
NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s, C<NBT_ptr_t>& c) { init(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s, C<NBT_ptr_t>& c)
NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s, T t1, T t2) { init(s, t1, t2); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s, T t1, T t2)
NBTArray	NBT/NBT.h	/^			NBTArray(const std::string& s, std::initializer_list<T2> v) { init(s, v); }$/;"	f	class:NBT::NBTArray	access:public	signature:(const std::string& s, std::initializer_list<T2> v)
NBTArray	NBT/NBT.h	/^			NBTArray(std::initializer_list<T2> v) { init("", v); }$/;"	f	class:NBT::NBTArray	access:public	signature:(std::initializer_list<T2> v)
NBTArray	NBT/NBT.h	/^	class NBTArray : public _NBTBase<ID>, public std::vector<T2>$/;"	c	namespace:NBT	inherits:_NBTBase,std::vector
NBTBase	NBT/NBT.h	/^			NBTBase(void) : name(NULL) { }$/;"	f	class:NBT::NBTBase	access:public	signature:(void)
NBTBase	NBT/NBT.h	/^	class NBTBase$/;"	c	namespace:NBT
NBTHelper	NBT/NBT.cc	/^	NBTHelper::NBTHelper(void)$/;"	f	class:NBT::NBTHelper	signature:(void)
NBTHelper	NBT/NBT.h	/^			NBTHelper( );$/;"	p	class:NBT::NBTHelper	access:private	signature:( )
NBTHelper	NBT/NBT.h	/^			NBTHelper(const NBTHelper&);$/;"	p	class:NBT::NBTHelper	access:private	signature:(const NBTHelper&)
NBTHelper	NBT/NBT.h	/^	class NBTHelper$/;"	c	namespace:NBT
NBTList	NBT/NBT.h	/^			NBTList(BYTE id) : tagIds(id) { NBTBase::setName(""); }$/;"	f	class:NBT::NBTList	access:public	signature:(BYTE id)
NBTList	NBT/NBT.h	/^			NBTList(C<NBT_ptr_t>& c) : tagIds(0) { init("", c.begin(), c.end()); }$/;"	f	class:NBT::NBTList	access:public	signature:(C<NBT_ptr_t>& c)
NBTList	NBT/NBT.h	/^			NBTList(T t1, T t2) : tagIds(0) { init("", t1, t2); }$/;"	f	class:NBT::NBTList	access:public	signature:(T t1, T t2)
NBTList	NBT/NBT.h	/^			NBTList(const std::string& s = "", BYTE id = 0) : tagIds(id) { NBTBase::setName(s); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s = Ó, BYTE id = 0)
NBTList	NBT/NBT.h	/^			NBTList(const std::string& s, C<NBT_ptr_t>& c) :tagIds(0) { init(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s, C<NBT_ptr_t>& c)
NBTList	NBT/NBT.h	/^			NBTList(const std::string& s, T t1, T t2) : tagIds(0) { init(s, t1, t2); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s, T t1, T t2)
NBTList	NBT/NBT.h	/^			NBTList(const std::string& s, std::initializer_list<NBT_ptr_t> v) : tagIds(0) { init(s, v); }$/;"	f	class:NBT::NBTList	access:public	signature:(const std::string& s, std::initializer_list<NBT_ptr_t> v)
NBTList	NBT/NBT.h	/^			NBTList(std::initializer_list<NBT_ptr_t> v) : tagIds(0) { init("", v); }$/;"	f	class:NBT::NBTList	access:public	signature:(std::initializer_list<NBT_ptr_t> v)
NBTList	NBT/NBT.h	/^	class NBTList : public _NBTBase<ID>, protected std::vector<NBT_ptr_t>$/;"	c	namespace:NBT	inherits:_NBTBase,std::vector
NBTSimple	NBT/NBT.h	/^			NBTSimple(T t) { init("", t); }$/;"	f	class:NBT::NBTSimple	access:public	signature:(T t)
NBTSimple	NBT/NBT.h	/^			NBTSimple(const std::string& s = "", T t = T()) { init(s, t); }$/;"	f	class:NBT::NBTSimple	access:public	signature:(const std::string& s = Ó, T t = T())
NBTSimple	NBT/NBT.h	/^	class NBTSimple : public _NBTBase<ID>$/;"	c	namespace:NBT	inherits:_NBTBase
NBTString	NBT/NBT.h	/^			NBTString(const std::string& s = "") : NBTArray<ID, WORD, BYTE>(s) { }$/;"	f	class:NBT::NBTString	access:public	signature:(const std::string& s = Ó)
NBTString	NBT/NBT.h	/^			NBTString(const std::string& s, const std::string& v) : $/;"	f	class:NBT::NBTString	access:public	signature:(const std::string& s, const std::string& v)
NBTString	NBT/NBT.h	/^	class NBTString : public NBTArray<ID, WORD, BYTE>$/;"	c	namespace:NBT	inherits:NBTArray
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(C<NBT_ptr_t>& c) : Names(*this), Tags(*this) { init("", c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(C<NBT_ptr_t>& c)
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(T t1, T t2) : Names(*this), Tags(*this) { init("", t1, t2); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(T t1, T t2)
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s = "") : Names(*this), Tags(*this) { NBTBase::setName(s); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s = Ó)
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s, C<NBT_ptr_t> c) : Names(*this), Tags(*this) { init(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, C<NBT_ptr_t> c)
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s, T t1, T t2) : Names(*this), Tags(*this) { init(s, t1, t2); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, T t1, T t2)
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(const std::string& s, std::initializer_list<NBT_ptr_t> v) : Names(*this), Tags(*this) { init(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, std::initializer_list<NBT_ptr_t> v)
NBTTagCompound	NBT/NBT.h	/^			NBTTagCompound(std::initializer_list<NBT_ptr_t> v) : Names(*this), Tags(*this) { init("", v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(std::initializer_list<NBT_ptr_t> v)
NBTTagCompound	NBT/NBT.h	/^	class NBTTagCompound : public _NBTBase<ID>, protected std::map<std::string, NBT_ptr_t>$/;"	c	namespace:NBT	inherits:_NBTBase,std::map
NBT_COMMON_H	NBT/common.h	2;"	d
NBT_H	NBT/NBT.h	2;"	d
NBT_IMP	NBT/NBT.cc	1;"	d	file:
NBT_IMP	NBT/NBT.cc	3;"	d	file:
NBT_READER_H	NBT/Reader.h	2;"	d
NBT_WRITER_H	NBT/Writer.h	2;"	d
NBT_ptr_t	NBT/NBT.h	/^				void setCompoundTag(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Compound(s, i1, i2))); }$/;"	p	signature:(new TAG_Compound(s, i1, i2))
NBT_ptr_t	NBT/NBT.h	/^				void setTagList(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_List(s, i1, i2))); }$/;"	p	signature:(new TAG_List(s, i1, i2))
NBT_ptr_t	NBT/NBT.h	/^			template<typename I> void setByteArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Byte_Array(s, i1, i2))); }$/;"	p	signature:(new TAG_Byte_Array(s, i1, i2))
NBT_ptr_t	NBT/NBT.h	/^			template<typename I> void setIntArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Int_Array(s, i1, i2))); }$/;"	p	signature:(new TAG_Int_Array(s, i1, i2))
NBT_ptr_t	NBT/NBT.h	/^			void setString(const std::string& name, const std::string& s) { setTag(NBT_ptr_t(new TAG_String(name, s))); }$/;"	p	signature:(new TAG_String(name, s))
NBT_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<NBTBase> NBT_ptr_t;$/;"	t	namespace:NBT
Names	NBT/NBT.h	/^					Names(NBTTagCompound<ID>& tc) : _tc(tc) { }$/;"	f	class:NBT::NBTTagCompound::Names	access:private	signature:(NBTTagCompound<ID>& tc)
Names	NBT/NBT.h	/^			class Names$/;"	c	class:NBT::NBTTagCompound	access:public
Names	NBT/NBT.h	/^			} Names;$/;"	m	class:NBT::NBTTagCompound	typeref:class:NBT::NBTTagCompound::Names	access:public
OBJ	NBT/makefile	/^OBJ=$(SRC:.cc=.o)$/;"	m
OBJ	makefile	/^OBJ=$(SRC:.cc=.o)$/;"	m
OBJ	test/makefile	/^OBJ=$(SRC:.cc=.o)$/;"	m
OBJECT_H	Object.h	2;"	d
Object	Object.cc	/^Object::Object(const Object& o) : _v(o._v)$/;"	f	class:Object	signature:(const Object& o)
Object	Object.cc	/^Object::Object(int v) : _v(v)$/;"	f	class:Object	signature:(int v)
Object	Object.cc	/^Object::Object(void) : _v(0)$/;"	f	class:Object	signature:(void)
Object	Object.h	/^		Object( );$/;"	p	class:Object	access:public	signature:( )
Object	Object.h	/^		Object(const Object&);$/;"	p	class:Object	access:public	signature:(const Object&)
Object	Object.h	/^		Object(int);$/;"	p	class:Object	access:public	signature:(int)
Object	Object.h	/^class Object$/;"	c
Object::Object	Object.cc	/^Object::Object(const Object& o) : _v(o._v)$/;"	f	class:Object	signature:(const Object& o)
Object::Object	Object.cc	/^Object::Object(int v) : _v(v)$/;"	f	class:Object	signature:(int v)
Object::Object	Object.cc	/^Object::Object(void) : _v(0)$/;"	f	class:Object	signature:(void)
Object::Object	Object.h	/^		Object( );$/;"	p	class:Object	access:public	signature:( )
Object::Object	Object.h	/^		Object(const Object&);$/;"	p	class:Object	access:public	signature:(const Object&)
Object::Object	Object.h	/^		Object(int);$/;"	p	class:Object	access:public	signature:(int)
Object::_v	Object.h	/^		int _v;$/;"	m	class:Object	access:private
Object::operator <<	Object.h	/^		friend std::ostream& operator<<(std::ostream&, const Object&);$/;"	p	class:Object	access:friend	signature:(std::ostream&, const Object&)
Object::operator =	Object.cc	/^Object& Object::operator=(const Object& o)$/;"	f	class:Object	signature:(const Object& o)
Object::operator =	Object.h	/^		Object& operator=(const Object&);$/;"	p	class:Object	access:public	signature:(const Object&)
Object::~Object	Object.cc	/^Object::~Object(void)$/;"	f	class:Object	signature:(void)
Object::~Object	Object.h	/^		~Object( );$/;"	p	class:Object	access:public	signature:( )
QWORD	NBT/common.h	/^	typedef std::uint64_t QWORD;$/;"	t	namespace:NBT
READER_IMP	NBT/Reader.cc	1;"	d	file:
READER_IMP	NBT/Reader.cc	3;"	d	file:
Read	NBT/NBT.h	/^			NBTBase *Read(const nbtistream&);$/;"	p	class:NBT::NBTHelper	access:public	signature:(const nbtistream&)
Read	NBT/NBT.h	/^			NBT_ptr_t Read(gzip::igzstream&);$/;"	p	class:NBT::NBTHelper	access:public	signature:(gzip::igzstream&)
Read	NBT/NBT.h	/^			NBT_ptr_t Read(std::istream&);$/;"	p	class:NBT::NBTHelper	access:public	signature:(std::istream&)
Read	NBT/NBT.h	/^	TAG_Compound_ptr_t Read(T& t)$/;"	f	namespace:NBT	signature:(T& t)
SCREEN_H	Screen.h	2;"	d
SHORT	NBT/common.h	/^	typedef WORD  SHORT;$/;"	t	namespace:NBT
SIZE_H	size.h	2;"	d
SRC	NBT/makefile	/^SRC=$(wildcard *.cc)$/;"	m
SRC	makefile	/^SRC=$(wildcard *.cc)$/;"	m
SRC	test/makefile	/^SRC=$(wildcard *.cc)$/;"	m
Screen	Screen.cc	/^Screen::Screen(Screen&& screen) : _width(screen._width), _height(screen._height), _os(screen._os)$/;"	f	class:Screen	signature:(Screen&& screen)
Screen	Screen.cc	/^Screen::Screen(const Screen& screen) : _width(screen._width), _height(screen._height), _os(screen._os)$/;"	f	class:Screen	signature:(const Screen& screen)
Screen	Screen.cc	/^Screen::Screen(int width, int height, std::ostream& os) : _width(width), _height(height), _os(os)$/;"	f	class:Screen	signature:(int width, int height, std::ostream& os)
Screen	Screen.cc	/^Screen::Screen(std::ostream& os) : _os(os)$/;"	f	class:Screen	signature:(std::ostream& os)
Screen	Screen.h	/^		Screen(Screen&&);$/;"	p	class:Screen	access:public	signature:(Screen&&)
Screen	Screen.h	/^		Screen(const Screen&);$/;"	p	class:Screen	access:public	signature:(const Screen&)
Screen	Screen.h	/^		Screen(int, int, std::ostream& = std::cout);$/;"	p	class:Screen	access:public	signature:(int, int, std::ostream& = std::cout)
Screen	Screen.h	/^		Screen(std::ostream& = std::cout);$/;"	p	class:Screen	access:public	signature:(std::ostream& = std::cout)
Screen	Screen.h	/^class Screen$/;"	c
Screen::Screen	Screen.cc	/^Screen::Screen(Screen&& screen) : _width(screen._width), _height(screen._height), _os(screen._os)$/;"	f	class:Screen	signature:(Screen&& screen)
Screen::Screen	Screen.cc	/^Screen::Screen(const Screen& screen) : _width(screen._width), _height(screen._height), _os(screen._os)$/;"	f	class:Screen	signature:(const Screen& screen)
Screen::Screen	Screen.cc	/^Screen::Screen(int width, int height, std::ostream& os) : _width(width), _height(height), _os(os)$/;"	f	class:Screen	signature:(int width, int height, std::ostream& os)
Screen::Screen	Screen.cc	/^Screen::Screen(std::ostream& os) : _os(os)$/;"	f	class:Screen	signature:(std::ostream& os)
Screen::Screen	Screen.h	/^		Screen(Screen&&);$/;"	p	class:Screen	access:public	signature:(Screen&&)
Screen::Screen	Screen.h	/^		Screen(const Screen&);$/;"	p	class:Screen	access:public	signature:(const Screen&)
Screen::Screen	Screen.h	/^		Screen(int, int, std::ostream& = std::cout);$/;"	p	class:Screen	access:public	signature:(int, int, std::ostream& = std::cout)
Screen::Screen	Screen.h	/^		Screen(std::ostream& = std::cout);$/;"	p	class:Screen	access:public	signature:(std::ostream& = std::cout)
Screen::_height	Screen.h	/^		int _width, _height;$/;"	m	class:Screen	access:private
Screen::_os	Screen.h	/^		std::ostream &_os;$/;"	m	class:Screen	access:private
Screen::_width	Screen.h	/^		int _width, _height;$/;"	m	class:Screen	access:private
Screen::clear	Screen.cc	/^void Screen::clear(void) const$/;"	f	class:Screen	signature:(void) const
Screen::clear	Screen.h	/^		void clear( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
Screen::flush	Screen.cc	/^void Screen::flush(void) const$/;"	f	class:Screen	signature:(void) const
Screen::flush	Screen.h	/^		void flush( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
Screen::height	Screen.cc	/^int Screen::height(void) const$/;"	f	class:Screen	signature:(void) const
Screen::height	Screen.h	/^		int height( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
Screen::operator <<	Screen.h	/^		template<typename T> Screen& operator<<(const T& t);$/;"	p	class:Screen	access:public	signature:(const T& t)
Screen::operator <<	Screen.h	/^		template<typename T> const Screen& operator<<(const T& t) const;$/;"	p	class:Screen	access:public	signature:(const T& t) const
Screen::operator <<	Screen.h	/^Screen& Screen::operator<<(const T& t)$/;"	f	class:Screen	signature:(const T& t)
Screen::operator <<	Screen.h	/^const Screen& Screen::operator<<(const T& t) const$/;"	f	class:Screen	signature:(const T& t) const
Screen::operator =	Screen.h	/^		Screen& operator=(Screen&&);$/;"	p	class:Screen	access:private	signature:(Screen&&)
Screen::operator =	Screen.h	/^		Screen& operator=(const Screen&);$/;"	p	class:Screen	access:private	signature:(const Screen&)
Screen::out	Screen.h	/^		template<typename T> void out(const T&) const;$/;"	p	class:Screen	access:public	signature:(const T&) const
Screen::out	Screen.h	/^void Screen::out(const T& t) const$/;"	f	class:Screen	signature:(const T& t) const
Screen::put	Screen.cc	/^void Screen::put(int x, int y, char c) const$/;"	f	class:Screen	signature:(int x, int y, char c) const
Screen::put	Screen.h	/^		void put(int, int, char) const;$/;"	p	class:Screen	access:public	signature:(int, int, char) const
Screen::resetColors	Screen.cc	/^void Screen::resetColors(void) const$/;"	f	class:Screen	signature:(void) const
Screen::resetColors	Screen.h	/^		void resetColors( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
Screen::setColor	Screen.cc	/^void Screen::setColor(int fgc, int bgc, int attr) const$/;"	f	class:Screen	signature:(int fgc, int bgc, int attr) const
Screen::setColor	Screen.h	/^		void setColor(int, int = -1, int = -1) const;$/;"	p	class:Screen	access:public	signature:(int, int = -1, int = -1) const
Screen::setPos	Screen.cc	/^void Screen::setPos(int x, int y) const$/;"	f	class:Screen	signature:(int x, int y) const
Screen::setPos	Screen.h	/^		void setPos(int, int) const;$/;"	p	class:Screen	access:public	signature:(int, int) const
Screen::width	Screen.cc	/^int Screen::width(void) const$/;"	f	class:Screen	signature:(void) const
Screen::width	Screen.h	/^		int width( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
Screen::~Screen	Screen.cc	/^Screen::~Screen(void)$/;"	f	class:Screen	signature:(void)
Screen::~Screen	Screen.h	/^		~Screen( );$/;"	p	class:Screen	access:public	signature:( )
TAG_Byte	NBT/common.h	/^	typedef NBTSimple		<1, BYTE> 			TAG_Byte;$/;"	t	namespace:NBT
TAG_Byte_Array	NBT/common.h	/^	typedef NBTArray		<7, DWORD, BYTE> 	TAG_Byte_Array;$/;"	t	namespace:NBT
TAG_Byte_Array_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Byte_Array>	TAG_Byte_Array_ptr_t;$/;"	t	namespace:NBT
TAG_Byte_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Byte>		TAG_Byte_ptr_t;$/;"	t	namespace:NBT
TAG_Compound	NBT/common.h	/^	typedef NBTTagCompound	<10> 				TAG_Compound;$/;"	t	namespace:NBT
TAG_Compound_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Compound>	TAG_Compound_ptr_t;$/;"	t	namespace:NBT
TAG_Double	NBT/common.h	/^	typedef NBTSimple		<6, double> 		TAG_Double;$/;"	t	namespace:NBT
TAG_Double_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Double>		TAG_Double_ptr_t;$/;"	t	namespace:NBT
TAG_Float	NBT/common.h	/^	typedef NBTSimple		<5, float>	 		TAG_Float;$/;"	t	namespace:NBT
TAG_Float_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Float>		TAG_Float_ptr_t;$/;"	t	namespace:NBT
TAG_Int	NBT/common.h	/^	typedef NBTSimple		<3, DWORD> 			TAG_Int;$/;"	t	namespace:NBT
TAG_Int_Array	NBT/common.h	/^	typedef NBTArray		<11, DWORD, DWORD> 	TAG_Int_Array;$/;"	t	namespace:NBT
TAG_Int_Array_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Int_Array>	TAG_Int_Array_ptr_t;$/;"	t	namespace:NBT
TAG_Int_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Int>		TAG_Int_ptr_t;$/;"	t	namespace:NBT
TAG_List	NBT/common.h	/^	typedef NBTList			<9> 				TAG_List;$/;"	t	namespace:NBT
TAG_List_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_List>		TAG_List_ptr_t;$/;"	t	namespace:NBT
TAG_Long	NBT/common.h	/^	typedef NBTSimple		<4, QWORD> 			TAG_Long;$/;"	t	namespace:NBT
TAG_Long_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Long>		TAG_Long_ptr_t;$/;"	t	namespace:NBT
TAG_Short	NBT/common.h	/^	typedef NBTSimple		<2, WORD> 			TAG_Short;$/;"	t	namespace:NBT
TAG_Short_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_Short>		TAG_Short_ptr_t;$/;"	t	namespace:NBT
TAG_String	NBT/common.h	/^	typedef NBTString		<8> 				TAG_String;$/;"	t	namespace:NBT
TAG_String_ptr_t	NBT/common.h	/^	typedef std::shared_ptr<TAG_String>		TAG_String_ptr_t;$/;"	t	namespace:NBT
TARGET	NBT/makefile	/^TARGET=libnbt.so$/;"	m
TARGET	makefile	/^TARGET=nbtedit$/;"	m
TARGET	test/makefile	/^TARGET=test$/;"	m
TEMPLATES	test/makefile	/^TEMPLATES=$(wildcard *.cpp)$/;"	m
TIMER_H	Timer.h	2;"	d
Tags	NBT/NBT.h	/^					Tags(NBTTagCompound<ID>& tc) : _tc(tc) { }$/;"	f	class:NBT::NBTTagCompound::Tags	access:private	signature:(NBTTagCompound<ID>& tc)
Tags	NBT/NBT.h	/^			class Tags$/;"	c	class:NBT::NBTTagCompound	access:public
Tags	NBT/NBT.h	/^			} Tags;$/;"	m	class:NBT::NBTTagCompound	typeref:class:NBT::NBTTagCompound::Tags	access:public
Timer	Timer.cc	/^Timer::Timer(void) : _t(start())$/;"	f	class:Timer	signature:(void)
Timer	Timer.h	/^		Timer( );$/;"	p	class:Timer	access:public	signature:( )
Timer	Timer.h	/^class Timer$/;"	c
Timer::Timer	Timer.cc	/^Timer::Timer(void) : _t(start())$/;"	f	class:Timer	signature:(void)
Timer::Timer	Timer.h	/^		Timer( );$/;"	p	class:Timer	access:public	signature:( )
Timer::_t	Timer.h	/^		int _t;$/;"	m	class:Timer	access:private
Timer::elapsed	Timer.cc	/^int Timer::elapsed(void)$/;"	f	class:Timer	signature:(void)
Timer::elapsed	Timer.h	/^		int elapsed( );$/;"	p	class:Timer	access:public	signature:( )
Timer::reset	Timer.cc	/^void Timer::reset(void)$/;"	f	class:Timer	signature:(void)
Timer::reset	Timer.h	/^		void reset( );$/;"	p	class:Timer	access:public	signature:( )
Timer::sleep	Timer.cc	/^void Timer::sleep(int ms)$/;"	f	class:Timer	signature:(int ms)
Timer::sleep	Timer.h	/^		void sleep(int);$/;"	p	class:Timer	access:public	signature:(int)
Timer::start	Timer.cc	/^int Timer::start(void)$/;"	f	class:Timer	signature:(void)
Timer::start	Timer.h	/^		static int start( );$/;"	p	class:Timer	access:private	signature:( )
Timer::~Timer	Timer.cc	/^Timer::~Timer(void)$/;"	f	class:Timer	signature:(void)
Timer::~Timer	Timer.h	/^		~Timer( );$/;"	p	class:Timer	access:public	signature:( )
TypeTable	NBT/common.h	/^	template<> struct TypeTable<10> { typedef TAG_Compound type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<11> { typedef TAG_Int_Array type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<1>  { typedef TAG_Byte type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<2>  { typedef TAG_Short type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<3>  { typedef TAG_Int type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<4>  { typedef TAG_Long type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<5>  { typedef TAG_Float type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<6>  { typedef TAG_Double type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<7>  { typedef TAG_Byte_Array type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<8>  { typedef TAG_String type; };$/;"	s	namespace:NBT
TypeTable	NBT/common.h	/^	template<> struct TypeTable<9>  { typedef TAG_List type; };$/;"	s	namespace:NBT
WORD	NBT/common.h	/^	typedef std::uint16_t  WORD;$/;"	t	namespace:NBT
WRITER_IMP	NBT/Writer.cc	1;"	d	file:
WRITER_IMP	NBT/Writer.cc	3;"	d	file:
_NBTBase	NBT/NBT.h	/^	class _NBTBase : public NBTBase$/;"	c	namespace:NBT	inherits:NBTBase
__CONIO_E_H	conio_e.h	2;"	d
__READER_DEBUG	NBT/Reader.cc	5;"	d	file:
__WRITER_DEBUG	NBT/Writer.cc	5;"	d	file:
_b	NBT/Reader.cc	/^		BYTE *_b = new BYTE[_n];$/;"	l
_b	NBT/Reader.cc	/^		BYTE *_b = new BYTE[n];$/;"	l
_b	NBT/Writer.cc	/^		BYTE *_b = new BYTE[n];$/;"	l
_buf	Keyboard.h	/^		std::deque<int> _buf;$/;"	m	class:Keyboard	access:private
_d	NBT/Reader.cc	/^		char *_d = d;$/;"	l
_height	Screen.h	/^		int _width, _height;$/;"	m	class:Screen	access:private
_i	NBT/NBT.h	/^							std::map<std::string, NBT_ptr_t>::iterator _i;$/;"	m	class:NBT::NBTTagCompound::Names::iterator	access:private
_i	NBT/NBT.h	/^							std::map<std::string, NBT_ptr_t>::iterator _i;$/;"	m	class:NBT::NBTTagCompound::Tags::iterator	access:private
_n	NBT/Reader.cc	/^		int _n = (int) n;$/;"	l
_os	Screen.h	/^		std::ostream &_os;$/;"	m	class:Screen	access:private
_read	NBT/NBT.cc	/^			nbt->_read(is);$/;"	p	file:	signature:(is)
_read	NBT/NBT.cc	/^	void NBTArray<ID, T1, T2>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTArray	signature:(const nbtistream& is)
_read	NBT/NBT.cc	/^	void NBTList<ID>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTList	signature:(const nbtistream& is)
_read	NBT/NBT.cc	/^	void NBTSimple<ID, T>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTSimple	signature:(const nbtistream& is)
_read	NBT/NBT.cc	/^	void NBTTagCompound<ID>::_read(const nbtistream& is)$/;"	f	class:NBT::NBTTagCompound	signature:(const nbtistream& is)
_read	NBT/NBT.h	/^			virtual void _read(const nbtistream&) = 0;$/;"	p	class:NBT::NBTBase	access:protected	signature:(const nbtistream&)
_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTArray	access:protected	signature:(const nbtistream&)
_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTList	access:protected	signature:(const nbtistream&)
_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTSimple	access:protected	signature:(const nbtistream&)
_read	NBT/NBT.h	/^			void _read(const nbtistream&);$/;"	p	class:NBT::NBTTagCompound	access:protected	signature:(const nbtistream&)
_t	Timer.h	/^		int _t;$/;"	m	class:Timer	access:private
_tc	NBT/NBT.h	/^					NBTTagCompound<ID> &_tc;$/;"	m	class:NBT::NBTTagCompound::Names	access:private
_tc	NBT/NBT.h	/^					NBTTagCompound<ID> &_tc;$/;"	m	class:NBT::NBTTagCompound::Tags	access:private
_v	Object.h	/^		int _v;$/;"	m	class:Object	access:private
_width	Screen.h	/^		int _width, _height;$/;"	m	class:Screen	access:private
_write	NBT/NBT.cc	/^			nbt->_write(os);$/;"	p	file:	signature:(os)
_write	NBT/NBT.cc	/^	void NBTArray<ID, T1, T2>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTArray	signature:(const nbtostream& os)
_write	NBT/NBT.cc	/^	void NBTList<ID>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTList	signature:(const nbtostream& os)
_write	NBT/NBT.cc	/^	void NBTSimple<ID, T>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTSimple	signature:(const nbtostream& os)
_write	NBT/NBT.cc	/^	void NBTTagCompound<ID>::_write(const nbtostream& os)$/;"	f	class:NBT::NBTTagCompound	signature:(const nbtostream& os)
_write	NBT/NBT.h	/^			virtual void _write(const nbtostream&) = 0;$/;"	p	class:NBT::NBTBase	access:protected	signature:(const nbtostream&)
_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTArray	access:protected	signature:(const nbtostream&)
_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTList	access:protected	signature:(const nbtostream&)
_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTSimple	access:protected	signature:(const nbtostream&)
_write	NBT/NBT.h	/^			void _write(const nbtostream&);$/;"	p	class:NBT::NBTTagCompound	access:protected	signature:(const nbtostream&)
argv	gz/gunzip.cc	/^		std::cerr << "Usage: " << argv[0] << " <in-file> <out-file>\\n";$/;"	l
argv	gz/gunzip.cc	/^        std::cerr << "ERROR: Opening file `" << argv[1] << "' failed.\\n";$/;"	l
argv	gz/gunzip.cc	/^        std::cerr << "ERROR: Opening file `" << argv[2] << "' failed.\\n";$/;"	l
argv	gz/gunzip.cc	/^        std::cerr << "ERROR: Reading file `" << argv[1] << "' failed.\\n";$/;"	l
argv	gz/gunzip.cc	/^        std::cerr << "ERROR: Writing file `" << argv[2] << "' failed.\\n";$/;"	l
argv	gz/gzip.cc	/^        std::cerr << "ERROR: Opening file `" << argv[1] << "' failed.\\n";$/;"	l
argv	gz/gzip.cc	/^        std::cerr << "ERROR: Opening file `" << argv[2] << "' failed.\\n";$/;"	l
argv	gz/gzip.cc	/^        std::cerr << "ERROR: Reading file `" << argv[1] << "' failed.\\n";$/;"	l
argv	gz/gzip.cc	/^        std::cerr << "ERROR: Writing file `" << argv[2] << "' failed.\\n";$/;"	l
arr	test.cc	/^	NBT::NBT_ptr_t arr   = NBT::NBT_ptr_t(new NBT::TAG_Int_Array("ids", {111, 222, 333, 444, 555, 666, 777}));$/;"	l
attr	Screen.cc	/^	if(attr >= 0) _os << ";" << attr;$/;"	l
b	NBT/NBT.cc	/^			NBTBase *b = NBTHelper::Instance().Read(is);$/;"	l
badbit	GZ/gzstream.cc	/^            clear(rdstate() | std::ios::badbit);$/;"	m	class:gzip::std::ios	file:
badbit	GZ/gzstream.cc	/^        clear(rdstate() | std::ios::badbit);$/;"	m	class:gzip::std::ios	file:
basic_nbt_reader	NBT/Reader.h	/^	class basic_nbt_reader$/;"	c	namespace:NBT
basic_nbt_writer	NBT/Writer.h	/^	class basic_nbt_writer$/;"	c	namespace:NBT
begin	NBT/NBT.h	/^					iterator begin() { return iterator(_tc.begin()); }$/;"	f	class:NBT::NBTTagCompound::Names	access:public	signature:()
begin	NBT/NBT.h	/^					iterator begin() { return iterator(_tc.begin()); }$/;"	f	class:NBT::NBTTagCompound::Tags	access:public	signature:()
begin	NBT/NBT.h	/^			iterator<T> begin(void) { return iterator<T>(vec_t::begin()); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
begin	NBT/NBT.h	/^			vec_t::iterator begin(void) { return vec_t::begin(); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
bgc	Screen.cc	/^	if(bgc >= 0) _os << ";" << bgc;$/;"	l
buf	GZ/gzstream.h	/^	    gzstreambuf buf;$/;"	m	class:gzip::gzstreambase	access:protected
buffer	GZ/gzstream.h	/^	    char buffer[bufferSize];   \/\/ data buffer$/;"	m	class:gzip::gzstreambuf	access:private
bufferSize	GZ/gzstream.h	/^	    static const int bufferSize = 47+256;    \/\/ size of data buff$/;"	m	class:gzip::gzstreambuf	access:private
c	Screen.cc	/^	_os << c;$/;"	l
c	conio_e.cc	/^	unsigned char c;$/;"	l
c	gz/gunzip.cc	/^		out << c;$/;"	l
c	gz/gunzip.cc	/^    char c;$/;"	l
c	gz/gzip.cc	/^		out << c;$/;"	l
c	gz/gzip.cc	/^    char c;$/;"	l
clear	Keyboard.cc	/^	_buf.clear();$/;"	p	file:	signature:()
clear	Keyboard.cc	/^void Keyboard::clear(void)$/;"	f	class:Keyboard	signature:(void)
clear	Keyboard.h	/^		void clear( );$/;"	p	class:Keyboard	access:public	signature:( )
clear	NBT/NBT.cc	/^		map_t::clear();$/;"	p	class:NBT::map_t	file:	signature:()
clear	NBT/NBT.cc	/^		vec_t::clear();$/;"	p	class:NBT::vec_t	file:	signature:()
clear	NBT/NBT.h	/^		map_t::clear();$/;"	p	class:NBT::map_t	signature:()
clear	NBT/NBT.h	/^		vec_t::clear();$/;"	p	class:NBT::vec_t	signature:()
clear	Screen.cc	/^void Screen::clear(void) const$/;"	f	class:Screen	signature:(void) const
clear	Screen.h	/^		void clear( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
close	GZ/gzstream.cc	/^    buf.close();$/;"	p	file:	signature:()
close	GZ/gzstream.cc	/^gzstreambuf *gzstreambuf::close()$/;"	f	class:gzip::gzstreambuf	signature:()
close	GZ/gzstream.cc	/^void gzstreambase::close()$/;"	f	class:gzip::gzstreambase	signature:()
close	GZ/gzstream.h	/^	    gzstreambuf* close();$/;"	p	class:gzip::gzstreambuf	access:public	signature:()
close	GZ/gzstream.h	/^	    void close();$/;"	p	class:gzip::gzstreambase	access:public	signature:()
close	gz/gunzip.cc	/^    in.close();$/;"	p	file:	signature:()
close	gz/gunzip.cc	/^    out.close();$/;"	p	file:	signature:()
close	gz/gzip.cc	/^    in.close();$/;"	p	file:	signature:()
close	gz/gzip.cc	/^    out.close();$/;"	p	file:	signature:()
close	test.cc	/^	in.close();$/;"	p	file:	signature:()
close	test.cc	/^	out.close();$/;"	p	file:	signature:()
cons	NBT/NBT.h	/^			std::map<BYTE, std::function<NBTBase *(void)>> cons;$/;"	m	class:NBT::NBTHelper	access:private
createContainCheck	test.cc	/^function<bool(T)> createContainCheck(initializer_list<T> l)$/;"	f	signature:(initializer_list<T> l)
d	NBT/Writer.cc	/^		while(n--) os << *d++;$/;"	l
data	test/test.cc	/^		unsigned char data;$/;"	l
data	test/test.cc	/^	int data;$/;"	l
do_read	NBT/Reader.cc	/^	void nbt_reader<gzip::igzstream>::do_read(char *d, size_t n) const$/;"	f	class:NBT::nbt_reader	signature:(char *d, size_t n) const
do_read	NBT/Reader.cc	/^	void nbt_reader<std::istream>::do_read(char *d, size_t n) const$/;"	f	class:NBT::nbt_reader	signature:(char *d, size_t n) const
do_read	NBT/Reader.h	/^			virtual void do_read(char *, size_t) const = 0;$/;"	p	class:NBT::basic_nbt_reader	access:protected	signature:(char *, size_t) const
do_read	NBT/Reader.h	/^			void do_read(char *, size_t) const;$/;"	p	class:NBT::nbt_reader	access:protected	signature:(char *, size_t) const
do_write	NBT/Writer.cc	/^	void nbt_writer<gzip::ogzstream>::do_write(char *d, size_t n) const$/;"	f	class:NBT::nbt_writer	signature:(char *d, size_t n) const
do_write	NBT/Writer.cc	/^	void nbt_writer<std::ostream>::do_write(char *d, size_t n) const$/;"	f	class:NBT::nbt_writer	signature:(char *d, size_t n) const
do_write	NBT/Writer.h	/^			virtual void do_write(char *, size_t) const = 0;$/;"	p	class:NBT::basic_nbt_writer	access:protected	signature:(char *, size_t) const
do_write	NBT/Writer.h	/^			void do_write(char *, size_t) const;$/;"	p	class:NBT::nbt_writer	access:protected	signature:(char *, size_t) const
dtag	test.cc	/^	NBT::NBT_ptr_t dtag  = NBT::NBT_ptr_t(new NBT::TAG_Double("xval", 75.1234));$/;"	l
elapsed	Timer.cc	/^int Timer::elapsed(void)$/;"	f	class:Timer	signature:(void)
elapsed	Timer.h	/^		int elapsed( );$/;"	p	class:Timer	access:public	signature:( )
empty	Keyboard.cc	/^bool Keyboard::empty(void) $/;"	f	class:Keyboard	signature:(void)
empty	Keyboard.h	/^		bool empty( );$/;"	p	class:Keyboard	access:public	signature:( )
empty	NBT/NBT.h	/^			bool empty( ) { return map_t::empty(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:( )
end	NBT/NBT.h	/^					iterator end() { return iterator(_tc.end()); }$/;"	f	class:NBT::NBTTagCompound::Names	access:public	signature:()
end	NBT/NBT.h	/^					iterator end() { return iterator(_tc.end()); }$/;"	f	class:NBT::NBTTagCompound::Tags	access:public	signature:()
end	NBT/NBT.h	/^			iterator<T> end(void) { return iterator<T>(vec_t::end()); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
end	NBT/NBT.h	/^			vec_t::iterator end(void) { return vec_t::end(); }$/;"	f	class:NBT::NBTList	access:public	signature:(void)
endl	NBT/Reader.cc	/^		std::cerr << std::endl;$/;"	m	class:NBT::std	file:
endl	NBT/Writer.cc	/^		std::cerr << std::endl;$/;"	m	class:NBT::std	file:
endl	Object.cc	/^	cout << "Object (copy): " << _v << endl;$/;"	l
endl	Object.cc	/^	cout << "Object (default): " << _v << endl;$/;"	l
endl	Object.cc	/^	cout << "Object (destr): " << _v << endl;$/;"	l
endl	Object.cc	/^	cout << "Object (int): " << _v << endl;$/;"	l
endl	Object.cc	/^	cout << "Object =: " << _v << endl;$/;"	l
endl	gz/gzip.cc	/^		std::cerr << "Usage: " << argv[0] << " <in-file> <out-file>" << std::endl;$/;"	m	class:std	file:
fds	conio_e.cc	/^	fd_set fds;$/;"	l
fgc	Screen.cc	/^	_os << "\\e[" << fgc;$/;"	l
file	GZ/gzstream.h	/^	    gzFile file;               \/\/ file handle for compressed file$/;"	m	class:gzip::gzstreambuf	access:private
files_to_try	test/test.cc	/^	char *files_to_try[] = {"\/dev\/tty", "\/dev\/console", NULL};$/;"	l
flush	Keyboard.cc	/^void Keyboard::flush(void)$/;"	f	class:Keyboard	signature:(void)
flush	Keyboard.h	/^		void flush( );$/;"	p	class:Keyboard	access:private	signature:( )
flush	Screen.cc	/^	_os.flush();$/;"	p	file:	signature:()
flush	Screen.cc	/^void Screen::flush(void) const$/;"	f	class:Screen	signature:(void) const
flush	Screen.h	/^		void flush( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
flush_buffer	GZ/gzstream.cc	/^int gzstreambuf::flush_buffer()$/;"	f	class:gzip::gzstreambuf	signature:()
flush_buffer	GZ/gzstream.h	/^	    int flush_buffer();$/;"	p	class:gzip::gzstreambuf	access:private	signature:()
fmode	GZ/gzstream.cc	/^	const char *fmode;$/;"	l
get	NBT/NBT.h	/^			T get(void) { return value; }$/;"	f	class:NBT::NBTSimple	access:public	signature:(void)
get	NBT/NBT.h	/^			const std::string get() { return std::string(vec_t::begin(), vec_t::end()); }$/;"	f	class:NBT::NBTString	access:public	signature:()
get	NBT/NBT.h	/^			const std::vector<T2> get() { return std::vector<T2>(vec_t::begin(), vec_t::end()); }$/;"	f	class:NBT::NBTArray	access:public	signature:()
getByte	NBT/NBT.h	/^			BYTE getByte(const std::string& s) { return getTag<TAG_Byte>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getByteArray	NBT/NBT.h	/^			const std::vector<BYTE> getByteArray(const std::string& s) { return getTag<TAG_Byte_Array>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getCompoundTag	NBT/NBT.h	/^			ptr_t getCompoundTag(const std::string& s) { return getTag<TAG_Compound>(s); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getDouble	NBT/NBT.h	/^			double getDouble(const std::string& s) { return getTag<TAG_Double>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getFloat	NBT/NBT.h	/^			float getFloat(const std::string& s) { return getTag<TAG_Float>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getID	NBT/NBT.cc	/^		os.write<BYTE>(getID());$/;"	p	file:	signature:()
getID	NBT/NBT.h	/^			BYTE getID(void)$/;"	f	class:NBT::_NBTBase	access:public	signature:(void)
getID	NBT/NBT.h	/^			virtual BYTE getID( ) = 0;$/;"	p	class:NBT::NBTBase	access:public	signature:( )
getInt	NBT/NBT.h	/^			DWORD getInt(const std::string& s) { return getTag<TAG_Int>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getIntArray	NBT/NBT.h	/^			const std::vector<DWORD> getIntArray(const std::string& s) { return std::dynamic_pointer_cast<TAG_Int_Array>(map_t::operator[](s))->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getLong	NBT/NBT.h	/^			QWORD getLong(const std::string& s) { return getTag<TAG_Long>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getName	NBT/NBT.h	/^			std::string getName(void) { return std::string(reinterpret_cast<const char *>(name)); }$/;"	f	class:NBT::NBTBase	access:public	signature:(void)
getScreenSize	size.cc	/^void getScreenSize(int *width, int *height)$/;"	f	signature:(int *width, int *height)
getScreenSize	size.h	/^void getScreenSize(int *, int *);$/;"	p	signature:(int *, int *)
getShort	NBT/NBT.h	/^			WORD getShort(const std::string& s) { return getTag<TAG_Short>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getString	NBT/NBT.h	/^			const std::string getString(const std::string& s) { return getTag<TAG_String>(s)->get(); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getTag	NBT/NBT.h	/^			NBT_ptr_t getTag(const std::string& s) { return hasTag(s) ? map_t::operator[](s) : NBT_ptr_t(NULL); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getTag	NBT/NBT.h	/^			template<typename T> std::shared_ptr<T> getTag(const std::string& s) { return std::dynamic_pointer_cast<T>(getTag(s)); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getTagList	NBT/NBT.h	/^			TAG_List::ptr_t getTagList(const std::string& s) { return getTag<TAG_List>(s); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
getch	Keyboard.cc	/^	while(kbhit()) _buf.push_back(getch());$/;"	p	file:	signature:()
getch	conio_e.cc	/^int getch()$/;"	f	signature:()
getch	conio_e.h	/^int getch();$/;"	p	signature:()
gzip	GZ/gzstream.cc	/^namespace gzip$/;"	n	file:
gzip	GZ/gzstream.h	/^namespace gzip$/;"	n
gzip::close	GZ/gzstream.cc	/^    buf.close();$/;"	p	file:	signature:()
gzip::fmode	GZ/gzstream.cc	/^	const char *fmode;$/;"	l
gzip::gzstreambase	GZ/gzstream.h	/^class gzstreambase : virtual public std::ios$/;"	c	namespace:gzip	inherits:std::ios
gzip::gzstreambase::buf	GZ/gzstream.h	/^	    gzstreambuf buf;$/;"	m	class:gzip::gzstreambase	access:protected
gzip::gzstreambase::close	GZ/gzstream.cc	/^void gzstreambase::close()$/;"	f	class:gzip::gzstreambase	signature:()
gzip::gzstreambase::close	GZ/gzstream.h	/^	    void close();$/;"	p	class:gzip::gzstreambase	access:public	signature:()
gzip::gzstreambase::gzstreambase	GZ/gzstream.cc	/^gzstreambase::gzstreambase(const char* name, int mode)$/;"	f	class:gzip::gzstreambase	signature:(const char* name, int mode)
gzip::gzstreambase::gzstreambase	GZ/gzstream.h	/^	    gzstreambase()$/;"	f	class:gzip::gzstreambase	access:public	signature:()
gzip::gzstreambase::gzstreambase	GZ/gzstream.h	/^	    gzstreambase(const char* name, int open_mode);$/;"	p	class:gzip::gzstreambase	access:public	signature:(const char* name, int open_mode)
gzip::gzstreambase::open	GZ/gzstream.cc	/^void gzstreambase::open(const char* name, int open_mode)$/;"	f	class:gzip::gzstreambase	signature:(const char* name, int open_mode)
gzip::gzstreambase::open	GZ/gzstream.h	/^	    void open(const char* name, int open_mode);$/;"	p	class:gzip::gzstreambase	access:public	signature:(const char* name, int open_mode)
gzip::gzstreambase::rdbuf	GZ/gzstream.h	/^	    gzstreambuf* rdbuf()$/;"	f	class:gzip::gzstreambase	access:public	signature:()
gzip::gzstreambase::~gzstreambase	GZ/gzstream.cc	/^gzstreambase::~gzstreambase()$/;"	f	class:gzip::gzstreambase	signature:()
gzip::gzstreambase::~gzstreambase	GZ/gzstream.h	/^	    ~gzstreambase();$/;"	p	class:gzip::gzstreambase	access:public	signature:()
gzip::gzstreambuf	GZ/gzstream.h	/^class gzstreambuf : public std::streambuf$/;"	c	namespace:gzip	inherits:std::streambuf
gzip::gzstreambuf::buffer	GZ/gzstream.h	/^	    char buffer[bufferSize];   \/\/ data buffer$/;"	m	class:gzip::gzstreambuf	access:private
gzip::gzstreambuf::bufferSize	GZ/gzstream.h	/^	    static const int bufferSize = 47+256;    \/\/ size of data buff$/;"	m	class:gzip::gzstreambuf	access:private
gzip::gzstreambuf::close	GZ/gzstream.cc	/^gzstreambuf *gzstreambuf::close()$/;"	f	class:gzip::gzstreambuf	signature:()
gzip::gzstreambuf::close	GZ/gzstream.h	/^	    gzstreambuf* close();$/;"	p	class:gzip::gzstreambuf	access:public	signature:()
gzip::gzstreambuf::file	GZ/gzstream.h	/^	    gzFile file;               \/\/ file handle for compressed file$/;"	m	class:gzip::gzstreambuf	access:private
gzip::gzstreambuf::flush_buffer	GZ/gzstream.cc	/^int gzstreambuf::flush_buffer()$/;"	f	class:gzip::gzstreambuf	signature:()
gzip::gzstreambuf::flush_buffer	GZ/gzstream.h	/^	    int flush_buffer();$/;"	p	class:gzip::gzstreambuf	access:private	signature:()
gzip::gzstreambuf::gzstreambuf	GZ/gzstream.h	/^	    gzstreambuf(void) : opened(0)$/;"	f	class:gzip::gzstreambuf	access:public	signature:(void)
gzip::gzstreambuf::is_open	GZ/gzstream.h	/^	    int is_open()$/;"	f	class:gzip::gzstreambuf	access:public	signature:()
gzip::gzstreambuf::mode	GZ/gzstream.h	/^	    int mode;                  \/\/ I\/O mode$/;"	m	class:gzip::gzstreambuf	access:private
gzip::gzstreambuf::open	GZ/gzstream.cc	/^gzstreambuf* gzstreambuf::open(const char* name, int open_mode)$/;"	f	class:gzip::gzstreambuf	signature:(const char* name, int open_mode)
gzip::gzstreambuf::open	GZ/gzstream.h	/^	    gzstreambuf* open(const char* name, int open_mode);$/;"	p	class:gzip::gzstreambuf	access:public	signature:(const char* name, int open_mode)
gzip::gzstreambuf::opened	GZ/gzstream.h	/^	    char opened;               \/\/ open\/close state of stream$/;"	m	class:gzip::gzstreambuf	access:private
gzip::gzstreambuf::overflow	GZ/gzstream.cc	/^int gzstreambuf::overflow(int c) \/\/ used for output buffer only$/;"	f	class:gzip::gzstreambuf	signature:(int c)
gzip::gzstreambuf::overflow	GZ/gzstream.h	/^	    virtual int overflow(int c = EOF);$/;"	p	class:gzip::gzstreambuf	access:public	signature:(int c = EOF)
gzip::gzstreambuf::sync	GZ/gzstream.cc	/^int gzstreambuf::sync()$/;"	f	class:gzip::gzstreambuf	signature:()
gzip::gzstreambuf::sync	GZ/gzstream.h	/^	    virtual int sync();$/;"	p	class:gzip::gzstreambuf	access:public	signature:()
gzip::gzstreambuf::underflow	GZ/gzstream.cc	/^int gzstreambuf::underflow() \/\/ used for input buffer only$/;"	f	class:gzip::gzstreambuf	signature:()
gzip::gzstreambuf::underflow	GZ/gzstream.h	/^	    virtual int underflow();$/;"	p	class:gzip::gzstreambuf	access:public	signature:()
gzip::gzstreambuf::~gzstreambuf	GZ/gzstream.h	/^	    ~gzstreambuf()$/;"	f	class:gzip::gzstreambuf	access:public	signature:()
gzip::igzstream	GZ/gzstream.h	/^class igzstream : public gzstreambase, public std::istream$/;"	c	namespace:gzip	inherits:gzstreambase,std::istream
gzip::igzstream::gzstreambase::open	GZ/gzstream.h	/^	        gzstreambase::open(name, open_mode);$/;"	p	class:gzip::igzstream::gzstreambase	signature:(name, open_mode)
gzip::igzstream::igzstream	GZ/gzstream.h	/^	    igzstream() : std::istream(&buf)$/;"	f	class:gzip::igzstream	access:public	signature:()
gzip::igzstream::igzstream	GZ/gzstream.h	/^	    igzstream(const char* name, int open_mode = std::ios::in | std::ios::binary)$/;"	f	class:gzip::igzstream	access:public	signature:(const char* name, int open_mode = std::ios::in | std::ios::binary)
gzip::igzstream::open	GZ/gzstream.h	/^	    void open(const char* name, int open_mode = std::ios::in | std::ios::binary)$/;"	f	class:gzip::igzstream	access:public	signature:(const char* name, int open_mode = std::ios::in | std::ios::binary)
gzip::igzstream::rdbuf	GZ/gzstream.h	/^	    gzstreambuf* rdbuf()$/;"	f	class:gzip::igzstream	access:public	signature:()
gzip::n_putback	GZ/gzstream.cc	/^    int n_putback = gptr() - eback();$/;"	l
gzip::num	GZ/gzstream.cc	/^    int num = gzread(file, buffer + 4, bufferSize - 4);$/;"	l
gzip::ogzstream	GZ/gzstream.h	/^class ogzstream : public gzstreambase, public std::ostream$/;"	c	namespace:gzip	inherits:gzstreambase,std::ostream
gzip::ogzstream::gzstreambase::open	GZ/gzstream.h	/^	        gzstreambase::open(name, open_mode);$/;"	p	class:gzip::ogzstream::gzstreambase	signature:(name, open_mode)
gzip::ogzstream::ogzstream	GZ/gzstream.h	/^	    ogzstream() : std::ostream(&buf)$/;"	f	class:gzip::ogzstream	access:public	signature:()
gzip::ogzstream::ogzstream	GZ/gzstream.h	/^	    ogzstream(const char* name, int mode = std::ios::out | std::ios::binary)$/;"	f	class:gzip::ogzstream	access:public	signature:(const char* name, int mode = std::ios::out | std::ios::binary)
gzip::ogzstream::open	GZ/gzstream.h	/^	    void open(const char* name, int open_mode = std::ios::out | std::ios::binary)$/;"	f	class:gzip::ogzstream	access:public	signature:(const char* name, int open_mode = std::ios::out | std::ios::binary)
gzip::ogzstream::rdbuf	GZ/gzstream.h	/^	    gzstreambuf* rdbuf()$/;"	f	class:gzip::ogzstream	access:public	signature:()
gzip::std::ios::badbit	GZ/gzstream.cc	/^            clear(rdstate() | std::ios::badbit);$/;"	m	class:gzip::std::ios	file:
gzip::std::ios::badbit	GZ/gzstream.cc	/^        clear(rdstate() | std::ios::badbit);$/;"	m	class:gzip::std::ios	file:
gzip::w	GZ/gzstream.cc	/^    int w = pptr() - pbase();$/;"	l
gzstreambase	GZ/gzstream.cc	/^gzstreambase::gzstreambase(const char* name, int mode)$/;"	f	class:gzip::gzstreambase	signature:(const char* name, int mode)
gzstreambase	GZ/gzstream.h	/^	    gzstreambase()$/;"	f	class:gzip::gzstreambase	access:public	signature:()
gzstreambase	GZ/gzstream.h	/^	    gzstreambase(const char* name, int open_mode);$/;"	p	class:gzip::gzstreambase	access:public	signature:(const char* name, int open_mode)
gzstreambase	GZ/gzstream.h	/^class gzstreambase : virtual public std::ios$/;"	c	namespace:gzip	inherits:std::ios
gzstreambuf	GZ/gzstream.h	/^	    gzstreambuf(void) : opened(0)$/;"	f	class:gzip::gzstreambuf	access:public	signature:(void)
gzstreambuf	GZ/gzstream.h	/^class gzstreambuf : public std::streambuf$/;"	c	namespace:gzip	inherits:std::streambuf
hasTag	NBT/NBT.h	/^			bool hasTag(const std::string& s) { return map_t::count(s) > 0; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
height	Screen.cc	/^int Screen::height(void) const$/;"	f	class:Screen	signature:(void) const
height	Screen.h	/^		int height( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
i	Keyboard.cc	/^	int i = 0;$/;"	l
i	NBT/NBT.h	/^					std::vector<NBT_ptr_t>::iterator i;$/;"	m	class:NBT::NBTList::iterator	access:private
i	test/test.cc	/^	int i;$/;"	l
igzstream	GZ/gzstream.h	/^	    igzstream() : std::istream(&buf)$/;"	f	class:gzip::igzstream	access:public	signature:()
igzstream	GZ/gzstream.h	/^	    igzstream(const char* name, int open_mode = std::ios::in | std::ios::binary)$/;"	f	class:gzip::igzstream	access:public	signature:(const char* name, int open_mode = std::ios::in | std::ios::binary)
igzstream	GZ/gzstream.h	/^class igzstream : public gzstreambase, public std::istream$/;"	c	namespace:gzip	inherits:gzstreambase,std::istream
in	gz/gunzip.cc	/^    igzstream in(argv[1]);$/;"	p	file:	signature:(argv[1])
in	gz/gzip.cc	/^    std::ifstream in(argv[1]);$/;"	p	file:	signature:(argv[1])
init	NBT/NBT.cc	/^	void NBTArray<ID, T1, T2>::init(const std::string& s, std::initializer_list<T2> v)$/;"	f	class:NBT::NBTArray	signature:(const std::string& s, std::initializer_list<T2> v)
init	NBT/NBT.cc	/^	void NBTList<ID>::init(const std::string& s, std::initializer_list<NBT_ptr_t> v)$/;"	f	class:NBT::NBTList	signature:(const std::string& s, std::initializer_list<NBT_ptr_t> v)
init	NBT/NBT.cc	/^	void NBTSimple<ID, T>::init(const std::string& s, T t)$/;"	f	class:NBT::NBTSimple	signature:(const std::string& s, T t)
init	NBT/NBT.cc	/^	void NBTTagCompound<ID>::init(const std::string& name, std::initializer_list<NBT_ptr_t> v)$/;"	f	class:NBT::NBTTagCompound	signature:(const std::string& name, std::initializer_list<NBT_ptr_t> v)
init	NBT/NBT.h	/^			template<typename T> void init(const std::string&, T, T);$/;"	p	class:NBT::NBTTagCompound	access:private	signature:(const std::string&, T, T)
init	NBT/NBT.h	/^			void init(const std::string& , T);$/;"	p	class:NBT::NBTSimple	access:private	signature:(const std::string& , T)
init	NBT/NBT.h	/^			void init(const std::string& , T, T);$/;"	p	class:NBT::NBTArray	access:private	signature:(const std::string& , T, T)
init	NBT/NBT.h	/^			void init(const std::string& , T, T);$/;"	p	class:NBT::NBTList	access:private	signature:(const std::string& , T, T)
init	NBT/NBT.h	/^			void init(const std::string& , std::initializer_list<NBT_ptr_t>);$/;"	p	class:NBT::NBTList	access:private	signature:(const std::string& , std::initializer_list<NBT_ptr_t>)
init	NBT/NBT.h	/^			void init(const std::string& , std::initializer_list<T2>);$/;"	p	class:NBT::NBTArray	access:private	signature:(const std::string& , std::initializer_list<T2>)
init	NBT/NBT.h	/^			void init(const std::string&);$/;"	p	class:NBT::NBTTagCompound	access:private	signature:(const std::string&)
init	NBT/NBT.h	/^			void init(const std::string&, std::initializer_list<NBT_ptr_t>);$/;"	p	class:NBT::NBTTagCompound	access:private	signature:(const std::string&, std::initializer_list<NBT_ptr_t>)
init	NBT/NBT.h	/^	void NBTArray<ID, T1, T2>::init(const std::string& s, I i1, I i2)$/;"	f	class:NBT::NBTArray	signature:(const std::string& s, I i1, I i2)
init	NBT/NBT.h	/^	void NBTList<ID>::init(const std::string& s, I i1, I i2)$/;"	f	class:NBT::NBTList	signature:(const std::string& s, I i1, I i2)
init	NBT/NBT.h	/^	void NBTTagCompound<ID>::init(const std::string& name, I i1, I i2)$/;"	f	class:NBT::NBTTagCompound	signature:(const std::string& name, I i1, I i2)
instance	Keyboard.cc	/^Keyboard& Keyboard::instance(void)$/;"	f	class:Keyboard	signature:(void)
instance	Keyboard.h	/^		static Keyboard& instance( );$/;"	p	class:Keyboard	access:public	signature:( )
is	NBT/Reader.h	/^			T &is;$/;"	m	class:NBT::nbt_reader	access:private
is_keyboard	test/test.cc	/^int is_keyboard(int fd)$/;"	f	signature:(int fd)
is_open	GZ/gzstream.h	/^	    int is_open()$/;"	f	class:gzip::gzstreambuf	access:public	signature:()
itag	test.cc	/^	NBT::NBT_ptr_t itag  = NBT::NBT_ptr_t(new NBT::TAG_Int("id", (NBT::DWORD) 0xaabbccdd));$/;"	l
iterator	NBT/NBT.h	/^							iterator(std::map<std::string, NBT_ptr_t>::iterator i) : _i(i) { }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:private	signature:(std::map<std::string, NBT_ptr_t>::iterator i)
iterator	NBT/NBT.h	/^							iterator(std::map<std::string, NBT_ptr_t>::iterator i) : _i(i) { }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:private	signature:(std::map<std::string, NBT_ptr_t>::iterator i)
iterator	NBT/NBT.h	/^					class iterator$/;"	c	class:NBT::NBTTagCompound::Names	access:public
iterator	NBT/NBT.h	/^					class iterator$/;"	c	class:NBT::NBTTagCompound::Tags	access:public
iterator	NBT/NBT.h	/^					iterator(std::vector<NBT_ptr_t>::iterator _i) : i(_i) { }$/;"	f	class:NBT::NBTList::iterator	access:private	signature:(std::vector<NBT_ptr_t>::iterator _i)
iterator	NBT/NBT.h	/^			class iterator$/;"	c	class:NBT::NBTList	access:public
kb	Keyboard.cc	/^	static Keyboard kb;$/;"	l	file:
kb	test/test.cc	/^	int kb = -1;$/;"	l
kbhit	conio_e.cc	/^int kbhit()$/;"	f	signature:()
kbhit	conio_e.h	/^int kbhit();$/;"	p	signature:()
l	NBT/NBT.cc	/^		size_t l = is.read<WORD>();$/;"	l
length	NBT/NBT.cc	/^		size_t length = static_cast<size_t>(is.read<DWORD>());$/;"	l
length	NBT/NBT.cc	/^		size_t length = static_cast<size_t>(is.read<T1>());$/;"	l
length	NBT/NBT.h	/^		DWORD length = 0;$/;"	l
list	test.cc	/^	NBT::NBT_ptr_t list  = NBT::NBT_ptr_t(new NBT::TAG_List("pokemon", svec)); \/\/svec.cbegin(), svec.cend()));$/;"	l
lst	test.cc	/^	NBT::TAG_List::ptr_t lst = std::dynamic_pointer_cast<NBT::TAG_List>(list);$/;"	l
main	gz/gunzip.cc	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	gz/gzip.cc	/^int main( int argc, char*argv[])$/;"	f	signature:( int argc, char*argv[])
main	test/test.cc	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
map_t	NBT/NBT.h	/^		typedef std::map<std::string, NBT_ptr_t> map_t;$/;"	t	class:NBT::NBTTagCompound	access:private
mode	GZ/gzstream.h	/^	    int mode;                  \/\/ I\/O mode$/;"	m	class:gzip::gzstreambuf	access:private
n	NBT/Reader.h	/^				do_read(reinterpret_cast<char *>(d), n);$/;"	l
n	NBT/Writer.h	/^				do_write(reinterpret_cast<char *>(d), n);$/;"	l
n_putback	GZ/gzstream.cc	/^    int n_putback = gptr() - eback();$/;"	l
name	NBT/NBT.h	/^			BYTE *name;$/;"	m	class:NBT::NBTBase	access:protected
nbt	NBT/NBT.cc	/^			NBT_ptr_t nbt = *i;$/;"	l
nbt	test.cc	/^	NBT::TAG_Compound_ptr_t nbt = NBT::Read(in);$/;"	l
nbt1	test.cc	/^	NBT::NBT_ptr_t nbt1  = NBT::NBT_ptr_t(new NBT::TAG_Compound("one", {itag, dtag}));$/;"	l
nbt2	test.cc	/^	NBT::NBT_ptr_t nbt2  = NBT::NBT_ptr_t(new NBT::TAG_Compound("two", {list}));$/;"	l
nbt3	test.cc	/^	NBT::NBT_ptr_t nbt3  = NBT::NBT_ptr_t(new NBT::TAG_Compound("three", {nbt2, arr}));$/;"	l
nbt_gzip_reader	NBT/NBT.cc	/^		read(nbt_gzip_reader(is));$/;"	p	file:	signature:(is)
nbt_gzip_reader	NBT/Reader.h	/^	typedef nbt_reader<gzip::igzstream> nbt_gzip_reader;$/;"	t	namespace:NBT
nbt_gzip_writer	NBT/NBT.cc	/^		write(nbt_gzip_writer(os));$/;"	p	file:	signature:(os)
nbt_gzip_writer	NBT/Writer.h	/^	typedef nbt_writer<gzip::ogzstream> nbt_gzip_writer;$/;"	t	namespace:NBT
nbt_reader	NBT/Reader.h	/^			nbt_reader(T& t) : is(t) { }$/;"	f	class:NBT::nbt_reader	access:public	signature:(T& t)
nbt_reader	NBT/Reader.h	/^	class nbt_reader : public basic_nbt_reader$/;"	c	namespace:NBT	inherits:basic_nbt_reader
nbt_std_reader	NBT/NBT.cc	/^		read(nbt_std_reader(is));$/;"	p	file:	signature:(is)
nbt_std_reader	NBT/Reader.h	/^	typedef nbt_reader<std::istream> nbt_std_reader;$/;"	t	namespace:NBT
nbt_std_writer	NBT/NBT.cc	/^		write(nbt_std_writer(os));$/;"	p	file:	signature:(os)
nbt_std_writer	NBT/Writer.h	/^	typedef nbt_writer<std::ostream> nbt_std_writer;$/;"	t	namespace:NBT
nbt_writer	NBT/Writer.h	/^			nbt_writer(T& t) : os(t) { }$/;"	f	class:NBT::nbt_writer	access:public	signature:(T& t)
nbt_writer	NBT/Writer.h	/^	class nbt_writer : public basic_nbt_writer$/;"	c	namespace:NBT	inherits:basic_nbt_writer
nbth	NBT/NBT.cc	/^		static NBTHelper nbth;$/;"	l	file:
nbtistream	NBT/Reader.h	/^	typedef basic_nbt_reader nbtistream;$/;"	t	namespace:NBT
nbtostream	NBT/Writer.h	/^	typedef basic_nbt_writer nbtostream;$/;"	t	namespace:NBT
nbttagcompound	test.cc	/^	NBT::NBT_ptr_t nbttagcompound = NBT::NBT_ptr_t(new NBT::TAG_Compound(vec));\/\/{itag, dtag, nbt1, nbt3, list, arr}));$/;"	l
new_term	test/test.cc	/^	struct termios old_term, new_term;$/;"	l
new_termios	conio_e.cc	/^	struct termios new_termios;$/;"	l
num	GZ/gzstream.cc	/^    int num = gzread(file, buffer + 4, bufferSize - 4);$/;"	l
ogzstream	GZ/gzstream.h	/^	    ogzstream() : std::ostream(&buf)$/;"	f	class:gzip::ogzstream	access:public	signature:()
ogzstream	GZ/gzstream.h	/^	    ogzstream(const char* name, int mode = std::ios::out | std::ios::binary)$/;"	f	class:gzip::ogzstream	access:public	signature:(const char* name, int mode = std::ios::out | std::ios::binary)
ogzstream	GZ/gzstream.h	/^class ogzstream : public gzstreambase, public std::ostream$/;"	c	namespace:gzip	inherits:gzstreambase,std::ostream
old_mode	test/test.cc	/^	int old_mode = -1;$/;"	l
old_term	test/test.cc	/^	struct termios old_term, new_term;$/;"	l
open	GZ/gzstream.cc	/^gzstreambuf* gzstreambuf::open(const char* name, int open_mode)$/;"	f	class:gzip::gzstreambuf	signature:(const char* name, int open_mode)
open	GZ/gzstream.cc	/^void gzstreambase::open(const char* name, int open_mode)$/;"	f	class:gzip::gzstreambase	signature:(const char* name, int open_mode)
open	GZ/gzstream.h	/^	        gzstreambase::open(name, open_mode);$/;"	p	class:gzip::igzstream::gzstreambase	signature:(name, open_mode)
open	GZ/gzstream.h	/^	        gzstreambase::open(name, open_mode);$/;"	p	class:gzip::ogzstream::gzstreambase	signature:(name, open_mode)
open	GZ/gzstream.h	/^	    gzstreambuf* open(const char* name, int open_mode);$/;"	p	class:gzip::gzstreambuf	access:public	signature:(const char* name, int open_mode)
open	GZ/gzstream.h	/^	    void open(const char* name, int open_mode = std::ios::in | std::ios::binary)$/;"	f	class:gzip::igzstream	access:public	signature:(const char* name, int open_mode = std::ios::in | std::ios::binary)
open	GZ/gzstream.h	/^	    void open(const char* name, int open_mode = std::ios::out | std::ios::binary)$/;"	f	class:gzip::ogzstream	access:public	signature:(const char* name, int open_mode = std::ios::out | std::ios::binary)
open	GZ/gzstream.h	/^	    void open(const char* name, int open_mode);$/;"	p	class:gzip::gzstreambase	access:public	signature:(const char* name, int open_mode)
opened	GZ/gzstream.h	/^	    char opened;               \/\/ open\/close state of stream$/;"	m	class:gzip::gzstreambuf	access:private
operator !=	NBT/NBT.h	/^							bool operator!=(const iterator& i) { return !operator==(i); }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:(const iterator& i)
operator !=	NBT/NBT.h	/^							bool operator!=(const iterator& i) { return !operator==(i); }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:(const iterator& i)
operator !=	NBT/NBT.h	/^					bool operator!=(const iterator& _i) { return i != _i.i; }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:(const iterator& _i)
operator *	NBT/NBT.h	/^							NBT_ptr_t operator*() { return _i->second; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:()
operator *	NBT/NBT.h	/^							std::string operator*() { return _i->first; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:()
operator *	NBT/NBT.h	/^					std::shared_ptr<T> operator*() { return std::dynamic_pointer_cast<T>(*i); }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:()
operator ++	NBT/NBT.h	/^							iterator& operator++() { ++_i; return *this; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:()
operator ++	NBT/NBT.h	/^							iterator& operator++() { ++_i; return *this; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:()
operator ++	NBT/NBT.h	/^					iterator<T>& operator++() { ++i; return *this; }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:()
operator ->	NBT/NBT.h	/^							NBT_ptr_t operator->() { return _i->second; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:()
operator ->	NBT/NBT.h	/^							const std::string *operator->() { return &_i->first; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:()
operator ->	NBT/NBT.h	/^					T& operator->() { return *operator*(); }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:()
operator <<	Object.cc	/^ostream& operator<<(ostream& s, const Object& o)$/;"	f	signature:(ostream& s, const Object& o)
operator <<	Object.h	/^		friend std::ostream& operator<<(std::ostream&, const Object&);$/;"	p	class:Object	access:friend	signature:(std::ostream&, const Object&)
operator <<	Screen.h	/^		template<typename T> Screen& operator<<(const T& t);$/;"	p	class:Screen	access:public	signature:(const T& t)
operator <<	Screen.h	/^		template<typename T> const Screen& operator<<(const T& t) const;$/;"	p	class:Screen	access:public	signature:(const T& t) const
operator <<	Screen.h	/^Screen& Screen::operator<<(const T& t)$/;"	f	class:Screen	signature:(const T& t)
operator <<	Screen.h	/^const Screen& Screen::operator<<(const T& t) const$/;"	f	class:Screen	signature:(const T& t) const
operator =	Keyboard.h	/^		Keyboard& operator=(const Keyboard&);$/;"	p	class:Keyboard	access:private	signature:(const Keyboard&)
operator =	NBT/NBT.h	/^			NBTHelper& operator=(const NBTHelper&);$/;"	p	class:NBT::NBTHelper	access:private	signature:(const NBTHelper&)
operator =	Object.cc	/^Object& Object::operator=(const Object& o)$/;"	f	class:Object	signature:(const Object& o)
operator =	Object.h	/^		Object& operator=(const Object&);$/;"	p	class:Object	access:public	signature:(const Object&)
operator =	Screen.h	/^		Screen& operator=(Screen&&);$/;"	p	class:Screen	access:private	signature:(Screen&&)
operator =	Screen.h	/^		Screen& operator=(const Screen&);$/;"	p	class:Screen	access:private	signature:(const Screen&)
operator ==	NBT/NBT.h	/^							bool operator==(const iterator& i) { return _i == i._i; }$/;"	f	class:NBT::NBTTagCompound::Names::iterator	access:public	signature:(const iterator& i)
operator ==	NBT/NBT.h	/^							bool operator==(const iterator& i) { return _i == i._i; }$/;"	f	class:NBT::NBTTagCompound::Tags::iterator	access:public	signature:(const iterator& i)
operator ==	NBT/NBT.h	/^					bool operator==(const iterator& _i) { return i == _i.i; }$/;"	f	class:NBT::NBTList::iterator	access:public	signature:(const iterator& _i)
operator []	Keyboard.cc	/^int Keyboard::operator[](int idx)$/;"	f	class:Keyboard	signature:(int idx)
operator []	Keyboard.h	/^		int operator[](int);$/;"	p	class:Keyboard	access:public	signature:(int)
orig_termios	conio_e.cc	/^struct termios *orig_termios()$/;"	f	signature:()
os	NBT/Writer.h	/^			T &os;$/;"	m	class:NBT::nbt_writer	access:private
out	Screen.h	/^		template<typename T> void out(const T&) const;$/;"	p	class:Screen	access:public	signature:(const T&) const
out	Screen.h	/^void Screen::out(const T& t) const$/;"	f	class:Screen	signature:(const T& t) const
out	gz/gunzip.cc	/^    std::ofstream out(argv[2]);$/;"	p	file:	signature:(argv[2])
out	gz/gzip.cc	/^    ogzstream out(argv[2]);$/;"	p	file:	signature:(argv[2])
overflow	GZ/gzstream.cc	/^int gzstreambuf::overflow(int c) \/\/ used for output buffer only$/;"	f	class:gzip::gzstreambuf	signature:(int c)
overflow	GZ/gzstream.h	/^	    virtual int overflow(int c = EOF);$/;"	p	class:gzip::gzstreambuf	access:public	signature:(int c = EOF)
peek	Keyboard.cc	/^int Keyboard::peek(void)$/;"	f	class:Keyboard	signature:(void)
peek	Keyboard.h	/^		int peek( );$/;"	p	class:Keyboard	access:public	signature:( )
poll	Keyboard.cc	/^int Keyboard::poll(void)$/;"	f	class:Keyboard	signature:(void)
poll	Keyboard.h	/^		int poll( );$/;"	p	class:Keyboard	access:public	signature:( )
pop	Keyboard.cc	/^int Keyboard::pop(void)$/;"	f	class:Keyboard	signature:(void)
pop	Keyboard.h	/^		int pop( );$/;"	p	class:Keyboard	access:public	signature:( )
pop_back	Keyboard.cc	/^	_buf.pop_back();$/;"	p	file:	signature:()
pop_front	Keyboard.cc	/^	_buf.pop_front();$/;"	p	file:	signature:()
prepare_terminal	conio_e.cc	/^void prepare_terminal()$/;"	f	signature:()
prepare_terminal	conio_e.h	/^void prepare_terminal();$/;"	p	signature:()
ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTArray<ID, T1, T2>> ptr_t;$/;"	t	class:NBT::NBTArray	access:public
ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTList<ID>> ptr_t;$/;"	t	class:NBT::NBTList	access:public
ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTSimple<ID, T>> ptr_t;$/;"	t	class:NBT::NBTSimple	access:public
ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTString<ID>> ptr_t;$/;"	t	class:NBT::NBTString	access:public
ptr_t	NBT/NBT.h	/^			typedef std::shared_ptr<NBTTagCompound<ID>> ptr_t;$/;"	t	class:NBT::NBTTagCompound	access:public
push_back	NBT/NBT.cc	/^			vec_t::push_back(is.read<T2>());$/;"	p	class:NBT::vec_t	file:	signature:(is.read<T2>())
push_back	NBT/NBT.cc	/^			vec_t::push_back(nbt);$/;"	p	class:NBT::vec_t	file:	signature:(nbt)
push_back	NBT/NBT.cc	/^			vec_t::push_back(t2);$/;"	p	class:NBT::vec_t	file:	signature:(t2)
put	Screen.cc	/^void Screen::put(int x, int y, char c) const$/;"	f	class:Screen	signature:(int x, int y, char c) const
put	Screen.h	/^		void put(int, int, char) const;$/;"	p	class:Screen	access:public	signature:(int, int, char) const
r	Keyboard.cc	/^	int r = _buf.at(0);$/;"	l
r	Keyboard.cc	/^	int r = _buf.at(_buf.size() - 1);$/;"	l
r	conio_e.cc	/^	int r;$/;"	l
rdbuf	GZ/gzstream.h	/^	    gzstreambuf* rdbuf()$/;"	f	class:gzip::gzstreambase	access:public	signature:()
rdbuf	GZ/gzstream.h	/^	    gzstreambuf* rdbuf()$/;"	f	class:gzip::igzstream	access:public	signature:()
rdbuf	GZ/gzstream.h	/^	    gzstreambuf* rdbuf()$/;"	f	class:gzip::ogzstream	access:public	signature:()
read	NBT/NBT.cc	/^		if(l) is.read(name, l);$/;"	p	file:	signature:(name, l)
read	NBT/NBT.cc	/^	void NBTBase::read(const nbtistream& is)$/;"	f	class:NBT::NBTBase	signature:(const nbtistream& is)
read	NBT/NBT.cc	/^	void NBTBase::read(gzip::igzstream& is)$/;"	f	class:NBT::NBTBase	signature:(gzip::igzstream& is)
read	NBT/NBT.cc	/^	void NBTBase::read(std::istream& is)$/;"	f	class:NBT::NBTBase	signature:(std::istream& is)
read	NBT/NBT.h	/^			void read(const nbtistream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(const nbtistream&)
read	NBT/NBT.h	/^			void read(gzip::igzstream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(gzip::igzstream&)
read	NBT/NBT.h	/^			void read(std::istream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(std::istream&)
read	NBT/Reader.cc	/^		is.read(d, n);$/;"	p	file:	signature:(d, n)
read	NBT/Reader.h	/^			T read() const;$/;"	p	class:NBT::basic_nbt_reader	access:public	signature:() const
read	NBT/Reader.h	/^			void read(BYTE *d, size_t n) const$/;"	f	class:NBT::basic_nbt_reader	access:public	signature:(BYTE *d, size_t n) const
read	NBT/Reader.h	/^	T basic_nbt_reader::read(void) const$/;"	f	class:NBT::basic_nbt_reader	signature:(void) const
readSeq	Keyboard.cc	/^int Keyboard::readSeq(int *b, int n)$/;"	f	class:Keyboard	signature:(int *b, int n)
readSeq	Keyboard.h	/^		int readSeq(int *, int = -1);$/;"	p	class:Keyboard	access:public	signature:(int *, int = -1)
reinterpret_cast	NBT/Reader.h	/^				do_read(reinterpret_cast<char *>(d), n);$/;"	p	signature:(d)
reinterpret_cast	NBT/Writer.h	/^				do_write(reinterpret_cast<char *>(d), n);$/;"	p	signature:(d)
removeTag	NBT/NBT.h	/^			bool removeTag(const std::string& s) { return hasTag(s) ? map_t::erase(s) : false; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s)
reserve	NBT/NBT.cc	/^		vec_t::reserve(length);$/;"	p	class:NBT::vec_t	file:	signature:(length)
reserve	NBT/NBT.cc	/^		vec_t::reserve(v.size());$/;"	p	class:NBT::vec_t	file:	signature:(v.size())
reset	Timer.cc	/^void Timer::reset(void)$/;"	f	class:Timer	signature:(void)
reset	Timer.h	/^		void reset( );$/;"	p	class:Timer	access:public	signature:( )
resetColors	Screen.cc	/^void Screen::resetColors(void) const$/;"	f	class:Screen	signature:(void) const
resetColors	Screen.h	/^		void resetColors( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
restore_terminal	conio_e.cc	/^void restore_terminal()$/;"	f	signature:()
restore_terminal	conio_e.h	/^void restore_terminal();$/;"	p	signature:()
run	Editor.cc	/^int Editor::run(int argc, char *argv[])$/;"	f	class:Editor	signature:(int argc, char *argv[])
run	Editor.h	/^		static int run(int, char **);$/;"	p	class:Editor	access:public	signature:(int, char **)
s	NBT/NBT.cc	/^			std::string s = nbt->getName();$/;"	l
s	NBT/NBT.h	/^			std::string s = (*i1)->NBTBase::getName();$/;"	l
s	Timer.cc	/^	int s = start() - _t;$/;"	l
s2tag	test.cc	/^	NBT::NBT_ptr_t s2tag = NBT::NBT_ptr_t(new NBT::TAG_String("", "hitmonchan"));$/;"	l
s3tag	test.cc	/^	NBT::NBT_ptr_t s3tag = NBT::NBT_ptr_t(new NBT::TAG_String("", "hitmontop"));$/;"	l
s4tag	test.cc	/^	NBT::NBT_ptr_t s4tag = NBT::NBT_ptr_t(new NBT::TAG_String("", "quilava"));$/;"	l
set	NBT/NBT.h	/^			template<typename T> void set(const std::string& name, T t)$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& name, T t)
set	NBT/NBT.h	/^			void set(T t) { value = t; }$/;"	f	class:NBT::NBTSimple	access:public	signature:(T t)
setByte	NBT/NBT.h	/^			void setByte(const std::string& s, BYTE v) { set<BYTE>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, BYTE v)
setByteArray	NBT/NBT.h	/^				void setByteArray(const std::string&s, C<BYTE> c) { setByteArray<C<BYTE>::iterator>(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, C<BYTE> c)
setByteArray	NBT/NBT.h	/^			template<typename I> void setByteArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Byte_Array(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
setByteArray	NBT/NBT.h	/^			void setByteArray(const std::string&s, BYTE *v, int n) { assert(n>0&&v); setByteArray<BYTE *>(s, v, v + n); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, BYTE *v, int n)
setColor	Screen.cc	/^void Screen::setColor(int fgc, int bgc, int attr) const$/;"	f	class:Screen	signature:(int fgc, int bgc, int attr) const
setColor	Screen.h	/^		void setColor(int, int = -1, int = -1) const;$/;"	p	class:Screen	access:public	signature:(int, int = -1, int = -1) const
setCompoundTag	NBT/NBT.h	/^				void setCompoundTag(const std::string& s, C<NBT_ptr_t> c) { setCompoundTag(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, C<NBT_ptr_t> c)
setCompoundTag	NBT/NBT.h	/^				void setCompoundTag(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Compound(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
setCompoundTag	NBT/NBT.h	/^			void setCompoundTag(TAG_Compound_ptr_t p) { setTag<TAG_Compound>(p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(TAG_Compound_ptr_t p)
setCompoundTag	NBT/NBT.h	/^			void setCompoundTag(const std::string& s, TAG_Compound_ptr_t p) { setTag<TAG_Compound>(s, p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, TAG_Compound_ptr_t p)
setDouble	NBT/NBT.h	/^			void setDouble(const std::string& s, double v) { set<double>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, double v)
setFloat	NBT/NBT.h	/^			void setFloat(const std::string& s, float v) { set<float>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, float v)
setInt	NBT/NBT.h	/^			void setInt(const std::string& s, DWORD v) { set<DWORD>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, DWORD v)
setIntArray	NBT/NBT.h	/^				void setIntArray(const std::string&s, C<DWORD> c) { setIntArray<C<DWORD>::iterator>(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, C<DWORD> c)
setIntArray	NBT/NBT.h	/^			template<typename I> void setIntArray(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_Int_Array(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
setIntArray	NBT/NBT.h	/^			void setIntArray(const std::string&s, DWORD *v, int n) { assert(n>0&&v); setIntArray<DWORD *>(s, v, v + n); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string&s, DWORD *v, int n)
setLong	NBT/NBT.h	/^			void setLong(const std::string& s, QWORD v) { set<QWORD>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, QWORD v)
setName	NBT/NBT.cc	/^		NBTBase::setName(name);$/;"	p	class:NBT::NBTBase	file:	signature:(name)
setName	NBT/NBT.cc	/^		NBTBase::setName(s);$/;"	p	class:NBT::NBTBase	file:	signature:(s)
setName	NBT/NBT.cc	/^	void NBTBase::setName(const std::string& s)$/;"	f	class:NBT::NBTBase	signature:(const std::string& s)
setName	NBT/NBT.h	/^				{ p->setName(name); map_t::operator[](name) = std::dynamic_pointer_cast<NBTBase>(p); }$/;"	p	signature:(name)
setName	NBT/NBT.h	/^			NBTArray(const std::string& s = "") { NBTBase::setName(s); }$/;"	p	class:NBT::NBTArray::NBTBase	signature:(s)
setName	NBT/NBT.h	/^			NBTList(const std::string& s = "", BYTE id = 0) : tagIds(id) { NBTBase::setName(s); }$/;"	p	class:NBT::NBTList::NBTBase	signature:(s)
setName	NBT/NBT.h	/^			NBTTagCompound(const std::string& s = "") : Names(*this), Tags(*this) { NBTBase::setName(s); }$/;"	p	class:NBT::NBTTagCompound::NBTBase	signature:(s)
setName	NBT/NBT.h	/^			void setName(const std::string&);$/;"	p	class:NBT::NBTBase	access:public	signature:(const std::string&)
setName	NBT/NBT.h	/^			void setTag(const std::string& s, NBT_ptr_t p) { p->setName(s); map_t::operator[](s) = p; }$/;"	p	signature:(s)
setName	NBT/NBT.h	/^		NBTBase::setName(name);$/;"	p	class:NBT::NBTBase	signature:(name)
setName	NBT/NBT.h	/^		NBTBase::setName(s);$/;"	p	class:NBT::NBTBase	signature:(s)
setPos	Screen.cc	/^void Screen::setPos(int x, int y) const$/;"	f	class:Screen	signature:(int x, int y) const
setPos	Screen.h	/^		void setPos(int, int) const;$/;"	p	class:Screen	access:public	signature:(int, int) const
setShort	NBT/NBT.h	/^			void setShort(const std::string& s, WORD v) { set<WORD>(s, v); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, WORD v)
setString	NBT/NBT.h	/^			void setString(const std::string& name, const std::string& s) { setTag(NBT_ptr_t(new TAG_String(name, s))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& name, const std::string& s)
setTag	NBT/NBT.h	/^			template<typename T> void setTag(const std::string& name, std::shared_ptr<T> p)$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& name, std::shared_ptr<T> p)
setTag	NBT/NBT.h	/^			template<typename T> void setTag(std::shared_ptr<T> p)$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(std::shared_ptr<T> p)
setTag	NBT/NBT.h	/^			void setTag(NBT_ptr_t p) { map_t::operator[](p->getName()) = p; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(NBT_ptr_t p)
setTag	NBT/NBT.h	/^			void setTag(const std::string& s, NBT_ptr_t p) { p->setName(s); map_t::operator[](s) = p; }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, NBT_ptr_t p)
setTagList	NBT/NBT.h	/^				void setTagList(const std::string& s, C<NBT_ptr_t> c) { setTagList(s, c.begin(), c.end()); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, C<NBT_ptr_t> c)
setTagList	NBT/NBT.h	/^				void setTagList(const std::string& s, I i1, I i2) { setTag(NBT_ptr_t(new TAG_List(s, i1, i2))); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, I i1, I i2)
setTagList	NBT/NBT.h	/^			void setTagList(TAG_List::ptr_t p) { setTag<TAG_List>(p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(TAG_List::ptr_t p)
setTagList	NBT/NBT.h	/^			void setTagList(const std::string& s, TAG_List::ptr_t p) { setTag<TAG_List>(s, p); }$/;"	f	class:NBT::NBTTagCompound	access:public	signature:(const std::string& s, TAG_List::ptr_t p)
sizeof	NBT/Reader.h	/^		do_read(reinterpret_cast<char *>(&t), sizeof(T));$/;"	p	signature:(T)
sizeof	NBT/Writer.h	/^		do_write(reinterpret_cast<char *>(&t), sizeof(T));$/;"	p	signature:(T)
sleep	Timer.cc	/^void Timer::sleep(int ms)$/;"	f	class:Timer	signature:(int ms)
sleep	Timer.h	/^		void sleep(int);$/;"	p	class:Timer	access:public	signature:(int)
stag	test.cc	/^	NBT::NBT_ptr_t stag  = NBT::NBT_ptr_t(new NBT::TAG_String("", "hitmonlee"));$/;"	l
start	Timer.cc	/^int Timer::start(void)$/;"	f	class:Timer	signature:(void)
start	Timer.h	/^		static int start( );$/;"	p	class:Timer	access:private	signature:( )
static_cast	NBT/NBT.cc	/^		os.write<DWORD>(static_cast<DWORD>(vec_t::size()));$/;"	p	file:	signature:(vec_t::size(
static_cast	NBT/NBT.cc	/^		os.write<T1>(static_cast<T1>(vec_t::size()));$/;"	p	file:	signature:(vec_t::size(
std::endl	gz/gzip.cc	/^		std::cerr << "Usage: " << argv[0] << " <in-file> <out-file>" << std::endl;$/;"	m	class:std	file:
strlen	NBT/NBT.cc	/^		os.write<WORD>(strlen(reinterpret_cast<char *>(name)));$/;"	p	file:	signature:(reinterpret_cast<char *>(
svec	test.cc	/^	vector<NBT::NBT_ptr_t> svec = {stag, s2tag, s3tag, s4tag};$/;"	l
sync	GZ/gzstream.cc	/^int gzstreambuf::sync()$/;"	f	class:gzip::gzstreambuf	signature:()
sync	GZ/gzstream.h	/^	    virtual int sync();$/;"	p	class:gzip::gzstreambuf	access:public	signature:()
t	NBT/Reader.h	/^		T t;$/;"	l
t	Screen.h	/^	_os << t;$/;"	l
t	conio_e.cc	/^	static struct termios t;$/;"	l	file:
tagIds	NBT/NBT.h	/^			BYTE tagIds;$/;"	m	class:NBT::NBTList	access:private
tb	Timer.cc	/^	timeb tb;$/;"	l
test	test.cc	/^void test(void)$/;"	f	signature:(void)
test_read	test.cc	/^void test_read();$/;"	p	file:	signature:()
test_read	test.cc	/^void test_read(void)$/;"	f	signature:(void)
test_write	test.cc	/^void test_write();$/;"	p	file:	signature:()
test_write	test.cc	/^void test_write(void)$/;"	f	signature:(void)
tv	conio_e.cc	/^	struct timeval tv = { 0L, 0L };$/;"	l
type	NBT/common.h	/^	template<> struct TypeTable<10> { typedef TAG_Compound type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<11> { typedef TAG_Int_Array type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<1>  { typedef TAG_Byte type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<2>  { typedef TAG_Short type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<3>  { typedef TAG_Int type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<4>  { typedef TAG_Long type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<5>  { typedef TAG_Float type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<6>  { typedef TAG_Double type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<7>  { typedef TAG_Byte_Array type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<8>  { typedef TAG_String type; };$/;"	t	struct:NBT::TypeTable	access:public
type	NBT/common.h	/^	template<> struct TypeTable<9>  { typedef TAG_List type; };$/;"	t	struct:NBT::TypeTable	access:public
underflow	GZ/gzstream.cc	/^int gzstreambuf::underflow() \/\/ used for input buffer only$/;"	f	class:gzip::gzstreambuf	signature:()
underflow	GZ/gzstream.h	/^	    virtual int underflow();$/;"	p	class:gzip::gzstreambuf	access:public	signature:()
value	NBT/NBT.h	/^			T value;$/;"	m	class:NBT::NBTSimple	access:private
vec	test.cc	/^	vector<NBT::NBT_ptr_t> vec = {itag, dtag, nbt1, nbt3, list, arr};$/;"	l
vec_t	NBT/NBT.h	/^		typedef std::vector<BYTE> vec_t;$/;"	t	class:NBT::NBTString	access:private
vec_t	NBT/NBT.h	/^		typedef std::vector<NBT_ptr_t> vec_t;$/;"	t	class:NBT::NBTList	access:private
vec_t	NBT/NBT.h	/^		typedef std::vector<T2> vec_t;$/;"	t	class:NBT::NBTArray	access:private
w	GZ/gzstream.cc	/^    int w = pptr() - pbase();$/;"	l
w	size.cc	/^	struct winsize w;$/;"	l
width	Screen.cc	/^int Screen::width(void) const$/;"	f	class:Screen	signature:(void) const
width	Screen.h	/^		int width( ) const;$/;"	p	class:Screen	access:public	signature:( ) const
write	NBT/NBT.cc	/^			i->second->write(os);$/;"	p	file:	signature:(os)
write	NBT/NBT.cc	/^			os.write(name, strlen(reinterpret_cast<char *>(name)));$/;"	p	file:	signature:(name, strlen(reinterpret_cast<char *>(name)))
write	NBT/NBT.cc	/^			os.write<T2>(v);$/;"	p	file:	signature:(v)
write	NBT/NBT.cc	/^		os.write<T>(value);$/;"	p	file:	signature:(value)
write	NBT/NBT.cc	/^	void NBTBase::write(const nbtostream& os)$/;"	f	class:NBT::NBTBase	signature:(const nbtostream& os)
write	NBT/NBT.cc	/^	void NBTBase::write(gzip::ogzstream& os)$/;"	f	class:NBT::NBTBase	signature:(gzip::ogzstream& os)
write	NBT/NBT.cc	/^	void NBTBase::write(std::ostream& os)$/;"	f	class:NBT::NBTBase	signature:(std::ostream& os)
write	NBT/NBT.h	/^			void write(gzip::ogzstream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(gzip::ogzstream&)
write	NBT/NBT.h	/^			void write(std::ostream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(std::ostream&)
write	NBT/NBT.h	/^  			void write(const nbtostream&);$/;"	p	class:NBT::NBTBase	access:public	signature:(const nbtostream&)
write	NBT/Writer.cc	/^		os.write(d, n);$/;"	p	file:	signature:(d, n)
write	NBT/Writer.h	/^			void write(BYTE *d, size_t n) const$/;"	f	class:NBT::basic_nbt_writer	access:public	signature:(BYTE *d, size_t n) const
write	NBT/Writer.h	/^			void write(T) const;$/;"	p	class:NBT::basic_nbt_writer	access:public	signature:(T) const
write	NBT/Writer.h	/^	void basic_nbt_writer::write(T t) const$/;"	f	class:NBT::basic_nbt_writer	signature:(T t) const
write	test.cc	/^	nbt->write(out);$/;"	p	file:	signature:(out)
write	test.cc	/^	nbttagcompound->write(out);$/;"	p	file:	signature:(out)
~Keyboard	Keyboard.cc	/^Keyboard::~Keyboard(void)$/;"	f	class:Keyboard	signature:(void)
~Keyboard	Keyboard.h	/^		~Keyboard( );$/;"	p	class:Keyboard	access:private	signature:( )
~NBTBase	NBT/NBT.h	/^			virtual ~NBTBase(void)$/;"	f	class:NBT::NBTBase	access:public	signature:(void)
~NBTHelper	NBT/NBT.cc	/^	NBTHelper::~NBTHelper(void)$/;"	f	class:NBT::NBTHelper	signature:(void)
~NBTHelper	NBT/NBT.h	/^			~NBTHelper( );$/;"	p	class:NBT::NBTHelper	access:private	signature:( )
~Object	Object.cc	/^Object::~Object(void)$/;"	f	class:Object	signature:(void)
~Object	Object.h	/^		~Object( );$/;"	p	class:Object	access:public	signature:( )
~Screen	Screen.cc	/^Screen::~Screen(void)$/;"	f	class:Screen	signature:(void)
~Screen	Screen.h	/^		~Screen( );$/;"	p	class:Screen	access:public	signature:( )
~Timer	Timer.cc	/^Timer::~Timer(void)$/;"	f	class:Timer	signature:(void)
~Timer	Timer.h	/^		~Timer( );$/;"	p	class:Timer	access:public	signature:( )
~gzstreambase	GZ/gzstream.cc	/^gzstreambase::~gzstreambase()$/;"	f	class:gzip::gzstreambase	signature:()
~gzstreambase	GZ/gzstream.h	/^	    ~gzstreambase();$/;"	p	class:gzip::gzstreambase	access:public	signature:()
~gzstreambuf	GZ/gzstream.h	/^	    ~gzstreambuf()$/;"	f	class:gzip::gzstreambuf	access:public	signature:()
